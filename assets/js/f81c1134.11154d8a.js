"use strict";(self.webpackChunknathaniel_vaur_henel_github_io=self.webpackChunknathaniel_vaur_henel_github_io||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/intellij-2025","metadata":{"permalink":"/blog/intellij-2025","source":"@site/blog/2025/2025-04-21.intellij-2025.md","title":"IntelliJ IDEA 2025.1 : une nouvelle lettre d\'amour aux d\xe9veloppeurs","description":"Tour d\'horizon d\xe9taill\xe9 des nouveaut\xe9s d\'IntelliJ IDEA 2025.1 : IA, Java 24, Kotlin K2, nouvelle UX, outils DevOps... tout ce qu\'il faut savoir.","date":"2025-04-21T00:00:00.000Z","tags":[{"inline":true,"label":"Java","permalink":"/blog/tags/java"},{"inline":true,"label":"d\xe9veloppement","permalink":"/blog/tags/developpement"},{"inline":true,"label":"Kotlin","permalink":"/blog/tags/kotlin"},{"inline":true,"label":"IntelliJ","permalink":"/blog/tags/intelli-j"},{"inline":true,"label":"JetBrains","permalink":"/blog/tags/jet-brains"}],"hasTruncateMarker":true,"authors":[{"name":"Nathaniel Vaur Henel","title":"Tech Lead, D\xe9veloppeur s\xe9nior, formateur et cr\xe9ateur de contenu","description":"Fort de deux d\xe9cennies de d\xe9veloppement, j\'ai acquis une expertise technique en d\xe9veloppement back-end Java associ\xe9 au framework Spring. Avec le temps, j\'ai d\xe9velopp\xe9 une approche \\"artisanale\\" du code, avec la volont\xe9 de maitriser toute la chaine de comp\xe9tences, du recueil du besoin \xe0 la maintenance, avec un souci d\'efficacit\xe9 et de qualit\xe9.","page":{"permalink":"/blog/authors/nathaniel-vaur-henel"},"socials":{"dev sensei":"https://nathaniel-vaur-henel.github.io/crafters/nathaniel-vaur-henel","linkedin":"https://www.linkedin.com/in/nathaniel-vaur-henel/","github":"https://github.com/nathaniel-vaur-henel","malt":"https://www.malt.fr/profile/nathanielvaurhenel"},"imageURL":"https://github.com/Nathaniel-Vaur-Henel.png","key":"nvh"}],"frontMatter":{"title":"IntelliJ IDEA 2025.1 : une nouvelle lettre d\'amour aux d\xe9veloppeurs","description":"Tour d\'horizon d\xe9taill\xe9 des nouveaut\xe9s d\'IntelliJ IDEA 2025.1 : IA, Java 24, Kotlin K2, nouvelle UX, outils DevOps... tout ce qu\'il faut savoir.","slug":"/intellij-2025","authors":"nvh","tags":["Java","d\xe9veloppement","Kotlin","IntelliJ","JetBrains"],"enableComments":true},"unlisted":false,"nextItem":{"title":"Paginer ses r\xe9sultats avec Spring","permalink":"/blog/spring-pagination"}},"content":"> Je reviens apr\xe8s presque un an d\'absence ! Pour une note plus courte, mais j\'ai plein de nouveaux projets dans le disque dur !  \\n> Je vous en reparlerai bient\xf4t, mais pour l\'instant, parlons de la nouvelle version d\'IntelliJ IDEA.\\n\\n## Un mot d\'amour \xe0 mon IDE\\n\\nJe suis fid\xe8le \xe0 IntelliJ IDEA depuis plus de dix ans. Entre nous, c\'est une relation qui dure.\\n\\nApr\xe8s tant d\'ann\xe9es, comment d\xe9crire l\'environnement IntelliJ ? Voici le tableau : un fauteuil massant, un plaid douillet, une tasse de ta boisson pr\xe9f\xe9r\xe9e \xe0 la temp\xe9rature id\xe9ale et qui se remplit par magie, un bon feu de chemin\xe9e qui cr\xe9pite... **IntelliJ c\'est l\'IDE cocooning qui cr\xe9e les conditions id\xe9ales pour coder sereinement**, sans friction. A peine ton projet est ouvert que tout fonctionne d\xe9j\xe0. Pas de surprises, pas de bricolage. Il est l\xe0 pour que tu te concentres sur ton boulot, pas sur de la configuration.\\n\\nEn avril 2025, JetBrains, l\'\xe9diteur de IntelliJ IDEA, a lanc\xe9 sa derni\xe8re mise \xe0 jour. J\'ai donc plong\xe9 dans cette version 2025.1 d\xe8s sa sortie. Voici ce que j\'en retiens.\\n\\n\x3c!--truncate--\x3e\\n\\n## JetBrains & IntelliJ IDEA : la philosophie du confort\\n\\nIntelliJ IDEA est un environnement de d\xe9veloppement int\xe9gr\xe9 (IDE) con\xe7u par [JetBrains](https://www.jetbrains.com/), une entreprise tch\xe8que bien connue dans l\u2019univers des outils pour d\xe9veloppeurs.\\n\\nJetBrains, c\u2019est l\u2019\xe9diteur derri\xe8re des outils populaires comme :\\n\\n- **PyCharm** (pour Python)\\n- **WebStorm** (pour JavaScript/TypeScript)\\n- **PhpStorm** (pour PHP)\\n- **Rider** (pour .NET)\\n- Et bien s\xfbr, **IntelliJ IDEA**, leur vaisseau amiral pour le d\xe9veloppement Java, Kotlin, et bien plus encore.\\n\\nMais JetBrains, ce n\u2019est pas juste une suite d\u2019outils. C\u2019est une **philosophie du d\xe9veloppement** : celle qui consid\xe8re que ton environnement de travail doit s\u2019adapter \xe0 toi, et non l\u2019inverse.\\n\\n:::tip Moins de friction, plus de flow\\nTout dans IntelliJ est pens\xe9 pour que tu restes dans ta zone de concentration. Navigation rapide, compl\xe9tion intelligente, refactorings puissants, gestion fluide des projets... L\u2019outil t\u2019assiste sans t\u2019envahir.\\n:::\\n\\n### Et IntelliJ, dans tout \xe7a ?\\n\\n**IntelliJ IDEA est l\u2019IDE que JetBrains d\xe9veloppe depuis plus de 20 ans. \xc0 l\u2019origine centr\xe9 sur Java, il s\u2019est ouvert progressivement \xe0 d\u2019autres langages** : Kotlin (forc\xe9ment), Scala, Groovy, SQL, JavaScript, et tous ceux que tu rencontres dans un projet moderne.\\n\\nIl existe en deux \xe9ditions :\\n\\n- **Community** : open-source, gratuite, avec un tr\xe8s bon socle pour les projets Java/Kotlin.\\n- **Ultimate** : version commerciale, avec des fonctionnalit\xe9s avanc\xe9es pour le web, le backend, les bases de donn\xe9es, les frameworks, et les outils DevOps.\\n\\nJ\u2019utilise IntelliJ IDEA Ultimate au quotidien et je le tiens toujours \xe0 jour. Au-del\xe0 des fonctionnalit\xe9s, cet IDE fait tout pour que tu sois bien : **il t\u2019installe dans ton environnement comme dans un espace de travail optimis\xe9 et personnalis\xe9. La version 2025.1 apporte une belle s\xe9rie d\u2019am\xe9liorations, dans cette logique de confort et d\'efficacit\xe9.**\\n\\n\\n## JetBrains AI : plus discret, plus intelligent, mieux int\xe9gr\xe9\\n\\nSans aucun doute, **la refonte de l\'IA est la nouveaut\xe9 majeure** de cette version.\\n\\nBien plus qu\'un assistant en surcouche, **JetBrains AI est une extension naturelle de l\'IDE**, pens\xe9e pour t\'aider quand tu en as besoin, sans t\'interrompre quand tu n\'en veux pas.\\n\\n### Ce qui change concr\xe8tement :\\n\\n- **Compl\xe9tion de code IA illimit\xe9e** (mod\xe8les GPT-like), d\xe9sormais gratuite.\\n- **Compr\xe9hension contextuelle multi-fichiers** : tu peux poser une question en rapport avec plusieurs classes dispers\xe9es, il comprend.\\n- **Modification guid\xe9e du code depuis le chat IA** : tu s\xe9lectionnes un morceau de code, tu poses ta question, et tu peux appliquer les suggestions automatiquement.\\n- **Choix de mod\xe8le** : GPT-4.1, Claude 3, Gemini 2, et m\xeame ex\xe9cution locale si tu veux garder ton code chez toi.\\n\\n:::tip Une IA au service du flow\\nPas besoin de recontextualiser ou de quitter l\'IDE. L\'IA agit l\xe0 o\xf9 tu travailles. Et tu peux tr\xe8s bien ne jamais l\'ouvrir si tu pr\xe9f\xe8res coder seul.\\n:::\\n\\n:::info Honn\xeatet\xe9\\nJe n\'ai pas encore utilis\xe9 cette partie, mais je compte m\'y mettre bient\xf4t.\\n:::\\n\\n## Java 24 : support complet et avanc\xe9\\n\\nJetBrains garde son statut de r\xe9f\xe9rence en mati\xe8re de support Java. **La version 2025.1 est totalement compatible avec Java 24**, y compris les fonctionnalit\xe9s en pr\xe9version.\\n\\n### Les apports majeurs :\\n\\n- **Support des collecteurs de flux** (`Stream.collect(...)`), devenus stables avec cette version.\\n- Le **debugger affiche la structure compl\xe8te des flux**, avec inspection directe des \xe9tapes de transformation.\\n- Tu peux **activer les features preview** (comme les d\xe9clarations record patterns \xe9tendues) en un clic.\\n- Les inspections IntelliJ **s\'adaptent \xe0 la version du JDK** configur\xe9e, sans alerter inutilement.\\n\\n## Kotlin : K2 entre en sc\xe8ne\\n\\n\\n:::info Si tu ne sais pas ce qu\u2019est Kotlin\\n\\n**Kotlin** est un langage de programmation moderne, concis et expressif, d\xe9velopp\xe9 par JetBrains. Il fonctionne parfaitement avec Java, et il est m\xeame officiellement support\xe9 par Google pour le d\xe9veloppement Android.\\n\\nTu peux l\u2019utiliser pour d\xe9velopper des applications backend, mobiles, desktop, ou m\xeame pour faire du scripting ou du multiplateforme (gr\xe2ce \xe0 Kotlin Multiplatform).\\n\\nSi tu viens du monde Java, tu devrais rapidement te sentir chez toi. Avec en plus moins de boilerplate, des null-safety int\xe9gr\xe9s, des coroutines pour la gestion de la concurrence, et une syntaxe agr\xe9able.\\n\\n:::\\n\\nKotlin fait un grand pas avec l\'**adoption par d\xe9faut de K2, son nouveau moteur d\'analyse**.\\nIl propose une am\xe9lioration profonde de la stabilit\xe9 et des performances, notamment dans les projets complexes.\\n\\n### Ce qui change avec K2 :\\n\\n- **Analyse syntaxique et s\xe9mantique plus rapide**\\n- Moins de faux positifs dans les inspections\\n- Meilleure prise en charge des plugins du compilateur\\n\\n### Il y en a un peu plus, je vous le mets quand m\xeame ?\\n\\n- **Kotlin Notebooks** : tu peux d\xe9sormais \xe9crire des blocs de code interactifs, avec rendu en ligne et ex\xe9cution pas \xe0 pas. Id\xe9al pour documenter une lib ou expliquer un algorithme.\\n- **Correctifs KDoc intelligents** : IntelliJ compl\xe8te automatiquement les noms qualifi\xe9s dans les tags `@link`.\\n- **R\xe9solution de d\xe9pendances plus fiable** dans les scripts `.kts` (notamment avec Gradle ou Compose).\\n\\n## Un terminal repens\xe9\\n\\nLe terminal int\xe9gr\xe9 \xe0 IntelliJ IDEA a toujours \xe9t\xe9 pratique.\\nAvec la version 2025.1, **JetBrains introduit une nouvelle architecture de terminal**, plus moderne et robuste (encore en b\xeata).\\n\\n### Qu\'est-ce que \xe7a change ?\\n\\n- Le terminal repose sur un **moteur xterm conforme**, plus fid\xe8le au comportement natif.\\n- L\'affichage est g\xe9r\xe9 **via l\'\xe9diteur lui-m\xeame**, ce qui permet une meilleure gestion du focus, de la s\xe9lection et du rendu.\\n- Moins de plantages, moins de latences, notamment quand tu lances des t\xe2ches lourdes (type build Gradle ou npm install).\\n\\n:::info Encore en b\xeata\\nLa nouvelle version est activable dans les param\xe8tres, \xe0 toi de voir si tu veux l\'adopter d\xe8s maintenant. Personnellement, je suis en train de la tester.\\n:::\\n\\n## UX : tout pour am\xe9liorer ton quotidien\\n\\n**JetBrains continue d\'affiner l\'exp\xe9rience utilisateur** avec une s\xe9rie de petites \xe9volutions qui, mises bout \xe0 bout, am\xe9liorent sensiblement le confort de travail.\\n\\n### Quelques exemples :\\n\\n- **Fusion du menu principal avec la toolbar** sur Windows et Linux, pour un design plus \xe9pur\xe9 et plus de place pour le code.\\n- **Recherche dans les aper\xe7us Markdown** : tu peux enfin retrouver une phrase dans un README sans avoir \xe0 ouvrir le fichier brut.\\n- **Cr\xe9ation rapide de fichiers** avec l\'ic\xf4ne `+` dans la vue Projet, qui affiche directement les templates de fichiers.\\n- **Dialogues natifs** pour l\'ouverture et l\'enregistrement de fichiers sur Windows.\\n- **Mise \xe0 jour automatique des plugins** : l\'IDE peut v\xe9rifier, t\xe9l\xe9charger et appliquer les mises \xe0 jour sans intervention.\\n\\n## DevOps, containerisation et int\xe9gration : tout est l\xe0\\n\\nIntelliJ ne s\'arr\xeate pas au code. Il pense aussi aux d\xe9veloppeurs qui d\xe9ploient, monitorent, ou travaillent avec des outils cloud.\\n\\n### Nouveaut\xe9s notables :\\n\\n- **Reconnaissance des Containerfiles** : IntelliJ les traite d\xe9sormais comme des Dockerfiles, avec tout le support syntaxique et les suggestions.\\n- Les **instructions Docker en minuscules** (`from`, `run`, `copy`) sont accept\xe9es sans alerte.\\n- **Export Kafka simplifi\xe9** : tu peux extraire les messages d\'un topic Kafka directement en JSON, CSV ou TSV, pour les r\xe9utiliser ailleurs.\\n- **Support d\'OpenTofu** : IntelliJ comprend les fichiers `.tofu`, te permet de les valider, ex\xe9cuter ou pr\xe9visualiser comme pour Terraform.\\n\\n## Git et gestion de version : plus clair, plus souple\\n\\nLes d\xe9veloppeurs qui vivent dans Git vont appr\xe9cier ces nouveaut\xe9s :\\n\\n- **Infos de commit dans la vue de diff** : auteur, date, message, hash complet.\\n- **Ex\xe9cution conditionnelle des hooks Git** : possibilit\xe9 de les d\xe9sactiver temporairement.\\n- **Mise \xe0 jour automatique des branches** apr\xe8s ajout ou modification d\'un remote.\\n- **Suppression de l\'interface de commit modale** : seul le mode non modale reste, mais un plugin existe pour revenir \xe0 l\'ancien comportement si tu pr\xe9f\xe8res.\\n\\n## Tooling : Gradle, JARs, int\xe9gration\\n\\nQuelques ajustements bienvenus ont \xe9t\xe9 r\xe9alis\xe9s pour celles et ceux qui creusent un peu plus loin que l\'IDE :\\n\\n- **Support de Gradle 8.13**\\n- **D\xe9finition explicite du JVM utilis\xe9 par le Daemon Gradle**\\n- **T\xe9l\xe9chargement automatique des sources de biblioth\xe8ques**, y compris sur les d\xe9p\xf4ts internes ou Nexus\\n- Meilleure gestion des **JARs multi-release** avec plusieurs niveaux de langage\\n\\n## Pour conclure\\n\\nAvec cette version d\'IntelliJ IDEA 2025.1, JetBrains continue de prendre soin de nous.\\n\\nElle ne r\xe9volutionne pas l\'outil, encore qu\'il va falloir que j\'essaie de plus pr\xe8s la partie IA tant attendue, mais elle renforce tout ce qui en fait **le compagnon de travail id\xe9al pour un d\xe9veloppeur** : productivit\xe9, stabilit\xe9 et clart\xe9.\\n\\nQue tu sois Java, Kotlin, Scala, DevOps ou tout \xe0 la fois, **tu trouveras dans cette version de quoi rendre tes journ\xe9es de d\xe9veloppement plus fluides, plus agr\xe9ables, et surtout plus efficaces**.\\n\\nJe l\'ai adopt\xe9e d\xe8s sa sortie. Et je ne vois aucune raison de ne pas faire de m\xeame."},{"id":"/spring-pagination","metadata":{"permalink":"/blog/spring-pagination","source":"@site/blog/2024/2024-05-09.spring_paging.md","title":"Paginer ses r\xe9sultats avec Spring","description":"Il arrive encore trop souvent de tomber sur des projets mal pagin\xe9s (voire pas du tout). Or la pagination est un \xe9l\xe9ment essentiel pour \xe9viter de surcharger les serveurs et de perdre les utilisateurs.","date":"2024-05-09T00:00:00.000Z","tags":[{"inline":true,"label":"Java","permalink":"/blog/tags/java"},{"inline":true,"label":"Spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"langage","permalink":"/blog/tags/langage"},{"inline":true,"label":"d\xe9veloppement","permalink":"/blog/tags/developpement"},{"inline":true,"label":"tuto","permalink":"/blog/tags/tuto"}],"hasTruncateMarker":true,"authors":[{"name":"Nathaniel Vaur Henel","title":"Tech Lead, D\xe9veloppeur s\xe9nior, formateur et cr\xe9ateur de contenu","description":"Fort de deux d\xe9cennies de d\xe9veloppement, j\'ai acquis une expertise technique en d\xe9veloppement back-end Java associ\xe9 au framework Spring. Avec le temps, j\'ai d\xe9velopp\xe9 une approche \\"artisanale\\" du code, avec la volont\xe9 de maitriser toute la chaine de comp\xe9tences, du recueil du besoin \xe0 la maintenance, avec un souci d\'efficacit\xe9 et de qualit\xe9.","page":{"permalink":"/blog/authors/nathaniel-vaur-henel"},"socials":{"dev sensei":"https://nathaniel-vaur-henel.github.io/crafters/nathaniel-vaur-henel","linkedin":"https://www.linkedin.com/in/nathaniel-vaur-henel/","github":"https://github.com/nathaniel-vaur-henel","malt":"https://www.malt.fr/profile/nathanielvaurhenel"},"imageURL":"https://github.com/Nathaniel-Vaur-Henel.png","key":"nvh"}],"frontMatter":{"slug":"/spring-pagination","title":"Paginer ses r\xe9sultats avec Spring","authors":"nvh","tags":["Java","Spring","langage","d\xe9veloppement","tuto"],"enableComments":true},"unlisted":false,"prevItem":{"title":"IntelliJ IDEA 2025.1 : une nouvelle lettre d\'amour aux d\xe9veloppeurs","permalink":"/blog/intellij-2025"},"nextItem":{"title":"Mermaid, l\'outil de cr\xe9ation de diagrammes vite faits, bien faits","permalink":"/blog/mermaid"}},"content":"Il arrive encore trop souvent de tomber sur des projets mal pagin\xe9s (voire pas du tout). Or la pagination est un \xe9l\xe9ment essentiel pour \xe9viter de surcharger les serveurs et de perdre les utilisateurs.\\n\\nDans des articles pr\xe9c\xe9dents, je t\'ai expliqu\xe9 [comment cr\xe9er un projet avec Spring Boot](2024-02-15.begin_spring.md) et comment faire une [API REST avec Spring](2024-03-01.continue_spring.md). Aujourd\'hui, je vais te montrer comment paginer et ordonner les r\xe9sultats de tes requ\xeates. Pour cela, nous allons encore utiliser Spring. Mais d\'abord, je t\'expliquerai ce qu\'est la pagination et pourquoi il est important de paginer les r\xe9sultats de tes requ\xeates. \\n\\n\x3c!--truncate--\x3e\\n\\n:::tip Dev sensei, raconte-moi une histoire\\n\\nCeci est une anecdote 100% authentique qui s\'est pass\xe9e voil\xe0 quelques ann\xe9es.\\n\\nJe travaille sur un plugin qui allait r\xe9cup\xe9rer des donn\xe9es depuis une API SOAP. Je commence par tester comment fonctionne le serveur (bien \xe9videmment, je n\'ai pas de documentation). La console du navigateur de l\'IHM journalisant les requ\xeates ex\xe9cut\xe9es, j\'analyse les requ\xeates HTTP.\\n\\nJe fais donc une requ\xeate simple, par d\xe9faut, sans param\xe8tres. Et l\xe0, j\'attends. Longtemps. Tr\xe8s longtemps. Et ma requ\xeate plante avec une belle erreur `500 Internal Server Error`. Je r\xe9essaie, serveur indisponible. J\'attends un peu et r\xe9essaie, serveur toujours indisponible. Je me renseigne et j\'apprends que le serveur est en train de red\xe9marrer, car il a plant\xe9.  \\nPas de souci, je fais autre chose en attendant que le serveur soit \xe0 nouveau disponible et je recommence. J\'imagine que tu as devin\xe9 la suite\xa0: le serveur plante \xe0 nouveau.  \\nJe m\'agace sur ce serveur en carton, et j\'imagine qu\'un autre d\xe9v doit \xeatre en train de tester un truc pas stable dessus.  \\nJe repars \xe0 la chasse aux informations et on me dit que le serveur a replant\xe9, car quelqu\'un a fait une requ\xeate qui a retourn\xe9 trop de donn\xe9es. Je fouille un peu et... c\'est moi\xa0!  \\n\\nEt bien oui, il n\'y a aucune limitation c\xf4t\xe9 serveur. Ainsi, une requ\xeate sans param\xe8tre retournait toutes les donn\xe9es de la base. Et la base \xe9tait \xe9norme, avec des liens de partout, des calculs \xe0 faire c\xf4t\xe9 serveur, et j\'en passe. Je r\xe2le aupr\xe8s du mainteneur de l\'application\xa0:  \\n\u2014 Quand m\xeame, c\'est pas s\xe9rieux\xa0! Il faut mettre une valeur maximum par d\xe9faut \xe0 la pagination.  \\nEt le gars me r\xe9pond\xa0:  \\n\u2014 Les r\xe9sultats ne sont pas pagin\xe9s. Il faut utiliser des filtres c\xf4t\xe9 client pour \xe9viter de planter le serveur. Mais ne t\'inqui\xe8tes pas, les utilisateurs ont l\'habitude, \xe7a fait des ann\xe9es que c\'est comme \xe7a\\".  \\n\u2014 Ah... D\'accord... Quand m\xeame.  \\nJe m\'en vais donc voir le responsable technique de l\'application \xe9tant donn\xe9 que je suis peu satisfait de la r\xe9ponse.  \\nL\'int\xe9ress\xe9 me dit alors\xa0:  \\n\u2014 La pagination\xa0? Qu\'est-ce que c\'est.\\"  \\nUn peu (juste un peu) agac\xe9, j\'explique rapidement que \xe7a permet de limiter de la taille des r\xe9ponses et, en passant, que cela \xe9viterait \xe0 son serveur de planter lamentablement. Il prend des notes et me dit qu\'il va voir ce qu\'il peut faire.  \\n\\nLe lendemain, r\xe9union de crise surprise avec tous les grands responsables techniques disponibles ainsi que le responsable du d\xe9partement. Que des gens en costard cravates. Et moi. Le responsable technique de la veille me demande\xa0:  \\n\u2014 Peux-tu nous expliquer la pagination\xa0?\\n\\n:::\\n\\n## La pagination des r\xe9sultats\xa0: avantages et inconv\xe9nients\\n\\nPaginer, c\'est d\xe9couper les r\xe9sultats d\'une requ\xeate en plusieurs pages. Comme un livre. Cela permet de limiter la taille des r\xe9ponses et d\'\xe9viter de charger trop d\'informations d\'un coup. Mais si, tu connais\xa0: ton moteur de recherche pr\xe9f\xe9r\xe9 et tes sites d\'e-commerce paginent g\xe9n\xe9ralement de fa\xe7on tr\xe8s factuelle. Tu as 10 r\xe9sultats et en bas, tu peux changer de page.\\n\\nTous les logiciels qui permettent de faire des requ\xeates \xe0 une base de donn\xe9es paginent par d\xe9faut pour \xe9viter d\'\xe9crouler le serveur. M\xeame la console H2. Mais si, tu connais, je t\'en ai parl\xe9 dans cet [article](2024-02-15.begin_spring.md#avant-de-commencer-pr\xe9sentation-des-d\xe9pendances).\\n\\nTu as aussi une pagination invisible et automatique\xa0: la page charge les premiers r\xe9sultats et quand tu les parcoures et que tu arrives vers la fin, la page charge les r\xe9sultats suivants. C\'est fluide et invisible pour l\'utilisateur. Sauf les bourrins qui appuient sur la touche \\"fin\\" pour aller directement \xe0 la fin de la page.\\n\\n### La pagination sauvera ton serveur\\n\\nLa pagination a plusieurs utilit\xe9s tr\xe8s concr\xe8tes c\xf4t\xe9 serveur\xa0:\\n\\n- Elle r\xe9duit la quantit\xe9 de donn\xe9es que le serveur doit traiter. Moins de ressource, m\xe9moire et processeur, sont donc utilis\xe9es. \\n- Si le serveur doit interroger d\'autres serveurs, comme une base de donn\xe9es, cela r\xe9duit la quantit\xe9 de donn\xe9es \xe0 transf\xe9rer.\\n- Elle augmente la r\xe9activit\xe9 du serveur, car les requ\xeates sont plus rapides \xe0 traiter et \xe0 transf\xe9rer.\\n- Cela stabilise le serveur qui sera moins sujet \xe0 des surcharges qui le feront ralentir.\\n\\n### La pagination sauvera ton client\\n\\nC\xf4t\xe9 client, la pagination a aussi des avantages\xa0:\\n\\n- Elle r\xe9duit le temps de chargement des pages et la consommation de donn\xe9es, car moins de donn\xe9es sont transf\xe9r\xe9es.\\n- Elle permet de naviguer plus facilement dans les r\xe9sultats, car les pages sont plus l\xe9g\xe8res et plus rapides \xe0 charger. Et on peut aller directement \xe0 la page souhait\xe9e sans passer par les pages interm\xe9diaires.\\n- Dans le cas d\'une pagination automatique, la premi\xe8re page s\'affiche rapidement et les suivantes se chargent en arri\xe8re-plan. Cela donne l\'impression que la page est plus rapide \xe0 charger.\\n- Elle \xe9vite \xe0 l\'utilisateur se de retrouver submerg\xe9 par un flot d\'information qu\'il ne traitera pas. \\n\\n### Les inconv\xe9nients de la pagination\\n\\nParce que rien n\'est parfait, la pagination a aussi ses inconv\xe9nients\xa0:\\n\\n- Elle peut \xeatre frustrante pour l\'utilisateur qui doit naviguer entre les pages pour trouver l\'information qu\'il cherche.\\n- Elle peut entra\xeener une perte de contexte si l\'utilisateur doit naviguer entre les pages pour trouver l\'information qu\'il cherche.\\n- Elle peut \xeatre difficile \xe0 mettre en place si les donn\xe9es ne sont pas bien structur\xe9es ou si les requ\xeates sont complexes.\\n- Elle peut \xeatre difficile \xe0 maintenir si les donn\xe9es changent fr\xe9quemment ou si les requ\xeates sont complexes.\\n- Si elle est mal impl\xe9ment\xe9e, elle peut entra\xeener des erreurs ou des incoh\xe9rences dans les r\xe9sultats.\\n\\n## Les grands principes de la pagination\\n\\nLe principe g\xe9n\xe9ral de la pagination est simple. Il faut _juste_ limiter le nombre de r\xe9sultats retourn\xe9s par une requ\xeate. Pour cela, on a besoin de deux param\xe8tres\xa0: le nombre de r\xe9sultats par page et le num\xe9ro de la page.\\n\\nExemple\xa0: si tu veux afficher 10 r\xe9sultats par page, tu demandes la page 1, tu auras les r\xe9sultats de 1 \xe0 10. Si tu demandes la page 2, tu auras les r\xe9sultats de 11 \xe0 20. Et ainsi de suite. \\n\\n:::info \\n\\nEn SQL, utilise plut\xf4t `LIMIT` et `OFFSET` pour paginer les r\xe9sultats\xa0: \\n\\n```sql\\nSELECT * FROM table\\nLIMIT 10 OFFSET 10; -- page 2\\n```\\n\\nCette requ\xeate retournera les r\xe9sultats de 11 \xe0 20.  \\n\\nSelon le SGBD, il peut y avoir des diff\xe9rences dans la syntaxe, mais le principe reste le m\xeame.\\n\\n:::\\n\\nPour que tes r\xe9sultats soient coh\xe9rents, il faut aussi les trier. Si tu ne le fais pas, tu auras potentiellement des r\xe9sultats diff\xe9rents \xe0 chaque requ\xeate. Va expliquer \xe0 tes utilisateurs que les r\xe9sultats changent \xe0 chaque fois qu\'ils rafra\xeechissent la page. Si tu le fais pour de vrai, filme leurs r\xe9actions et envoie-les-moi s\'il te pla\xeet, que je me marre un peu.\\n\\nEt quand tu renvoies tes r\xe9sultats, n\'oublie pas de renvoyer le nombre total de r\xe9sultats et de pages. Cela permettra \xe0 l\'utilisateur de savoir combien de pages il y a et combien de r\xe9sultats il y a en tout.\\n\\nEn g\xe9n\xe9ral, il faut renvoyer toutes les informations de la page. Cela permet au client de savoir o\xf9 il en est et de naviguer plus facilement entre les pages\xa0: \\n- le num\xe9ro de la page,\\n- le nombre de r\xe9sultats par page,\\n- le nombre total de r\xe9sultats,\\n- le nombre total de pages\\n- et bien s\xfbr les r\xe9sultats de la page.\\n\\n:::info L\'astuce de ton dev sensei\\n\\nPense \xe0 limiter la taille maximale de tes pages, car sinon, tu auras toujours un petit malin pour te faire des pages d\'un milliard de r\xe9sultats.\\n\\n:::\\n\\n:::info Le moment mn\xe9motechnique\\n\\nLa pagination a besoin de trois informations pour fonctionner\xa0: \\n- Le num\xe9ro de la page.\\n- Le nombre de r\xe9sultats par page.\\n- Le tri des r\xe9sultats.\\n\\n:::\\n\\n## La pagination dans Spring MVC\\n\\nEt maintenant, on va Springer\xa9\xa0!\\n\\n### Une pagination rapide, mais sans contr\xf4le\\n\\nDans mon [article pr\xe9c\xe9dent sur Spring](2024-03-01.continue_spring.md), nous avions \xe9crit un sac fourre tout. Reprenons le [controller](2024-03-01.continue_spring.md#\xe9crivons-le-controller) et modifions-le avec d\'ajouter la pagination au `findAll`\xa0: \\n\\n```java title=\\"SomethingController.java\\"\\npackage fr.nvh.begin.spring.bag;\\n\\nimport fr.nvh.begin.spring.bag.use.cases.SomethingFindPageUseCase;\\nimport lombok.RequiredArgsConstructor;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.data.domain.Page;\\nimport org.springframework.data.domain.Pageable;\\nimport org.springframework.http.HttpStatus;\\nimport org.springframework.web.bind.annotation.GetMapping;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.ResponseStatus;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\n@Slf4j\\n@RequiredArgsConstructor\\n@RestController\\n@RequestMapping(\\"/api/something\\")\\npublic class SomethingController {\\n  private final SomethingFindPageUseCase somethingFindPageUseCase;\\n\\n  @ResponseStatus(HttpStatus.PARTIAL_CONTENT) // indique que la m\xe9thode retourne un code HTTP 206\\n  @GetMapping(\\"/page/flemmard\\") // g\xe9n\xe9ralement, on supprime le findAll et on garde le findPage, mais l\xe0, je garde les deux pour l\'exemple\\n  public Page<SomethingDto> findPage(Pageable page) {\\n    log.info(\\"GET /api/something/page {}\\", page);\\n    return somethingFindPageUseCase.findPage(page); // appel du use case\\n  }\\n  //... reste du controller\\n}\\n```\\n\\nBien s\xfbr, je ne t\'ai mis que ce qu\'il y a \xe0 ajouter. Le controller initial \xe0 compl\xe9ter se trouve dans [cet article](2024-03-01.continue_spring.md#\xe9crivons-le-controller).\\n\\nSpring va se charger de tout pour toi. Tu pourras appeler ton endpoint avec les param\xe8tres `page` et `size` pour paginer tes r\xe9sultats.\\n\\nTu peux aussi ajouter des param\xe8tres pour trier les r\xe9sultats. Pour cela, tu peux ajouter un param\xe8tre `sort` \xe0 ta m\xe9thode avec comme valeur le nom du champ \xe0 trier. Par exemple, si tu veux trier par `name`, tu ajoutes `sort=name` \xe0 ta requ\xeate. Si tu veux choisir le sens du tri, tu ajoutes `sort=name,asc` ou `sort=name,desc`. Par d\xe9faut, le tri est ascendant. Et si tu veux ajouter un autre champ de tri, tu ajoutes un autre param\xe8tre `sort`, comme \xe7a\xa0: `sort=name,asc&sort=age,desc`.\\n\\n:::note Exemple de requ\xeate\\n\\n```http\\nGET http://localhost:8080/api/something/page/flemmard?page=0&size=10&sort=name,asc\\n```\\n\\nCette requ\xeate retournera les 10 premiers r\xe9sultats tri\xe9s par nom dans l\'ordre croissant.\\n\\n:::\\n\\n:::warning Attention aux Chocabugs\xa0!\\n\\nAvec `Pageable`, le nombre de pages commence \xe0 **0**\xa0! Si tu n\'y fais pas attention et que tu fais commencer ton num\xe9ro de page \xe0 **1**, il te manquera toujours la premi\xe8re page.\\n\\nEt paf, \xe7a fait des Chocabugs\xa9.\\n\\n:::\\n\\n### La pagination avec plus de contr\xf4le\\n\\nC\'est la version pour les flemmards o\xf9 tu laisses Spring faire le boulot pour toi. Voyons un peu une version avec plus de contr\xf4le\xa0: \\n\\n```java title=\\"SomethingController.java\\"\\npackage fr.nvh.begin.spring.bag;\\n\\nimport fr.nvh.begin.spring.bag.use.cases.SomethingFindPageUseCase;\\nimport lombok.RequiredArgsConstructor;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.data.domain.Page;\\nimport org.springframework.data.domain.PageRequest;\\nimport org.springframework.data.domain.Pageable;\\nimport org.springframework.data.domain.Sort;\\nimport org.springframework.http.HttpStatus;\\nimport org.springframework.web.bind.annotation.GetMapping;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.ResponseStatus;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\nimport java.util.Arrays;\\n\\n@Slf4j\\n@RequiredArgsConstructor\\n@RestController\\n@RequestMapping(\\"/api/something\\")\\npublic class SomethingController {\\n  private final SomethingFindPageUseCase somethingFindPageUseCase;\\n\\n  @ResponseStatus(HttpStatus.PARTIAL_CONTENT) // indique que la m\xe9thode retourne un code HTTP 206\\n  @GetMapping(\\"/page/control\\")\\n  // g\xe9n\xe9ralement, on supprime le findAll et on garde le findPage, mais l\xe0, je garde les deux pour l\'exemple\\n  public Page<SomethingDto> findPage(int page, int size, String sort) {\\n    log.info(\\"GET /api/something/page?page={}&size={}&sort={}\\", page, size, sort);\\n    Pageable pageable = PageRequest.of(page, size, Sort.by(sort));\\n    return somethingFindPageUseCase.findPage(pageable); // appel du use case\\n  }\\n}\\n```\\n\\nDans cette version, tu passes les param\xe8tres et tu cr\xe9es ton `Pageable`. Cela te permet de g\xe9rer des minimums, des maximums, un tri par d\xe9faut, etc. Tu peux aussi ajouter des contr\xf4les sur les param\xe8tres pour \xe9viter les erreurs.\\n\\nTu peux faire des choses du genre\xa0:\\n\\n```java title=\\"SomethingController.java\\"\\npackage fr.nvh.begin.spring.bag;\\n\\nimport fr.nvh.begin.spring.bag.use.cases.SomethingFindPageUseCase;\\nimport lombok.RequiredArgsConstructor;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.data.domain.Page;\\nimport org.springframework.data.domain.PageRequest;\\nimport org.springframework.data.domain.Pageable;\\nimport org.springframework.data.domain.Sort;\\nimport org.springframework.http.HttpStatus;\\nimport org.springframework.web.bind.annotation.GetMapping;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.ResponseStatus;\\n\\n@Slf4j\\n@RequiredArgsConstructor\\n//@RestController\\n@RequestMapping(\\"/api/something\\")\\npublic class SomethingController {\\n  private final SomethingFindPageUseCase somethingFindPageUseCase;\\n\\n\\n  @ResponseStatus(HttpStatus.PARTIAL_CONTENT) // indique que la m\xe9thode retourne un code HTTP 206\\n  @GetMapping(\\"/page/control/plus\\")\\n  // g\xe9n\xe9ralement, on supprime le findAll et on garde le findPage, mais l\xe0, je garde les deux pour l\'exemple\\n  public Page<SomethingDto> findPagePlus(int page, int size, String sort) {\\n    log.info(\\"GET /api/something/page/control/plus?page={}&size={}&sort={}\\", page, size, sort);\\n    Pageable pageable = buildPageable(page, size, sort);\\n    return somethingFindPageUseCase.findPage(pageable); // appel du use case\\n  }\\n\\n  /**\\n   * Une petite m\xe9thode \xe0 part pour que ce soit plus clair\\n   */\\n  private static Pageable buildPageable(int paramPage, int paramSize, String paramSort) {\\n    int page = Math.min(0, paramPage); // pas de num\xe9ro de page n\xe9gatif\\n    int size = Math.clamp(paramSize, 5, 20); // pas de taille d\'un million\\n\\n    String sort; // on v\xe9rifie que le param\xe8tre de tri est correct\\n    if (paramSort.equalsIgnoreCase(\\"name\\")\\n            || paramSort.equalsIgnoreCase(\\"id\\")\\n            || paramSort.equalsIgnoreCase(\\"description\\")) {\\n      sort = paramSort;\\n    } else {\\n      // si le param\xe8tre de tri n\'est pas correct, ou null, on trie par nom\\n      sort = \\"name\\";\\n    }\\n\\n    return PageRequest.of(page, size, Sort.by(sort));\\n  }\\n}\\n```\\n\\n:::info L\'astuce de ton dev sensei\\n\\nTu peux du coup g\xe9rer ta pagination comme tu l\'entends. Par exemple\xa0:\\n- ajouter un tri par d\xe9faut, car sans tri, la pagination peut \xeatre bugu\xe9e.\\n- ajouter un mapping pour que les noms des champs du tri qui correspondent g\xe9n\xe9ralement \xe0 des champs du DTO correspondent aux noms des champs de la base de donn\xe9es.\\n- ajouter des contr\xf4les sur les param\xe8tres `page` et `size` pour \xe9viter les erreurs.\\n- changer le nom des param\xe8tres.\\n- changer l\'emplacement des param\xe8tres, par exemple dans le header de la requ\xeate.\\n\\nBref, tu as le contr\xf4le absolu sur ta pagination.\\n\\n:::\\n\\n### Le r\xe9sultat de la pagination\\n\\nLe r\xe9sultat de la pagination est un objet `Page` qui contient\xa0:\\n- `content`\xa0: les r\xe9sultats de la page.\\n- `pageable`\xa0: les informations de la pagination qui ont \xe9t\xe9 envoy\xe9es.\\n- Et ensuite, en vrac plein d\'informations sur la page\xa0: le nombre de pages, le nombre de r\xe9sultats par page, le nombre total de r\xe9sultats, le nombre total de pages, est-ce que c\'est la premi\xe8re ou la derni\xe8re page, etc.\\n\\nTu peux donc renvoyer cet objet directement \xe0 ton client. Il pourra ainsi g\xe9rer l\'affichage de tes pages. \\n\\nVoici \xe0 quoi cela ressemble en JSON\xa0: \\n\\n```json\\n{\\n  \\"content\\": [\\n    {\\n      \\"id\\": 14,\\n      \\"name\\": \\"Thing 12\\",\\n      \\"description\\": \\"HNNNOQSYBN\\"\\n    },\\n    {\\n      \\"id\\": 15,\\n      \\"name\\": \\"Thing 13\\",\\n      \\"description\\": \\"MZSGVSDRWR\\"\\n    },\\n    {\\n      \\"id\\": 16,\\n      \\"name\\": \\"Thing 14\\",\\n      \\"description\\": \\"XMLIPBQJWC\\"\\n    },\\n    {\\n      \\"id\\": 17,\\n      \\"name\\": \\"Thing 15\\",\\n      \\"description\\": \\"UHOGWJCPQQ\\"\\n    },\\n    {\\n      \\"id\\": 18,\\n      \\"name\\": \\"Thing 16\\",\\n      \\"description\\": \\"KGBZWEXIZM\\"\\n    }\\n  ],\\n  \\"pageable\\": {\\n    \\"pageNumber\\": 1,\\n    \\"pageSize\\": 5,\\n    \\"sort\\": {\\n      \\"empty\\": false,\\n      \\"sorted\\": true,\\n      \\"unsorted\\": false\\n    },\\n    \\"offset\\": 5,\\n    \\"paged\\": true,\\n    \\"unpaged\\": false\\n  },\\n  \\"last\\": false,\\n  \\"totalElements\\": 101,\\n  \\"totalPages\\": 21,\\n  \\"size\\": 5,\\n  \\"number\\": 1,\\n  \\"sort\\": {\\n    \\"empty\\": false,\\n    \\"sorted\\": true,\\n    \\"unsorted\\": false\\n  },\\n  \\"first\\": false,\\n  \\"numberOfElements\\": 5,\\n  \\"empty\\": false\\n}\\n```\\n\\n:::info L\'astuce de ton dev sensei\\n\\nSi tes besoins sont diff\xe9rents, tu peux cr\xe9er ton propre objet de retour, quelque chose d\'\xe9quivalent \xe0 `Page`. Par contre, tu devras tout faire manuellement. \\n\\n:::\\n\\n### Le Use Case\\n\\nNous venons de voir le `Controller`, passant au `Use Case`. Je t\'ai fait utiliser `Pageable` pour g\xe9rer les param\xe8tres de pagination et `Page` pour le retour pour une bonne raison. En effet, Spring utilise par d\xe9faut du `Controller` au `Repository`. \\n\\n```java title=\\"SomethingFindPageUseCase.java\\"\\npackage fr.nvh.begin.spring.bag.use.cases;\\n\\nimport fr.nvh.begin.spring.bag.SomethingDto;\\nimport fr.nvh.begin.spring.bag.SomethingEntity;\\nimport fr.nvh.begin.spring.bag.SomethingMapper;\\nimport fr.nvh.begin.spring.bag.SomethingRepository;\\nimport lombok.RequiredArgsConstructor;\\nimport org.springframework.data.domain.Page;\\nimport org.springframework.data.domain.PageImpl;\\nimport org.springframework.data.domain.Pageable;\\nimport org.springframework.stereotype.Component;\\n\\nimport java.util.List;\\n\\n@RequiredArgsConstructor\\n@Component\\npublic class SomethingFindPageUseCase {\\n\\n  private final SomethingRepository repository;\\n  private final SomethingMapper mapper;\\n\\n  /**\\n   * La m\xe9thode findAll(pageable) est fourni par l\'interface {@link org.springframework.data.repository.PagingAndSortingRepository}, qui est incluse dans {@link org.springframework.data.jpa.repository.JpaRepository}\\n   */\\n  public Page<SomethingDto> findPage(Pageable pageable) {\\n    Page<SomethingEntity> paginatedResult = repository.findAll(pageable); // Une belle Page\\n    List<SomethingDto> pageContent = paginatedResult\\n            .stream()\\n            .map(mapper::toDto) // on transforme les entit\xe9s en DTO\\n            .toList();\\n    return new PageImpl<>(pageContent, pageable, paginatedResult.getTotalElements());// on refait un page, mais avec les DTO\\n  }\\n}\\n```\\n\\nVoil\xe0. Tu as ta pagination.\\n\\n:::info L\'astuce de ton dev sensei\\n\\nSi tu veux avoir ta propre impl\xe9mentation de `Page`, tu peux l\'appeler ici.\\n\\nEt n\'oublie pas de v\xe9rifier quelles sont les interfaces que tu \xe9tends dans ton propre `Repository`, sinon tu n\'auras pas la m\xe9thode `findAll(pageable)`.\\n\\n:::\\n\\nVoici quelques liens pour approfondir les sujets abord\xe9s dans cet article en attendant le prochain article\xa0!\\n\\n- Spring\xa0:\\n  - [Paging and Sorting](https://docs.spring.io/spring-data/rest/docs/2.0.0.M1/reference/html/paging-chapter.html) \\n  - [Spring Data REST - Paging and Sorting](https://docs.spring.io/spring-data/rest/reference/paging-and-sorting.html)\\n- Les sites officiels\xa0:\\n  - > mettre des liens \\n- Baeldung\xa0:\\n  - [REST Pagination in Spring](https://www.baeldung.com/rest-api-pagination-in-spring) \\n  - [Pagination and Sorting using Spring Data JPA](https://www.baeldung.com/spring-data-jpa-pagination-sorting)\\n  - [Converting List to Page Using Spring Data JPA](https://www.baeldung.com/spring-data-jpa-convert-list-page)\\n  - [Spring Data Web Support](https://www.baeldung.com/spring-data-web-support)\\n\\n## Conclusion\\n\\nJ\'ai commenc\xe9 par te raconter une ~~belle~~ histoire que j\'ai v\xe9cue.\\n\\nJe t\'ai expliqu\xe9 ce qu\'\xe9tait la pagination\xa0: le pourquoi, le comment, les avantages et les inconv\xe9nients.\\n\\nJe t\'ai pos\xe9 les bases techniques de la pagination, ce dont tu as absolument besoin pour paginer tes r\xe9sultats.\\n\\nEt enfin, je t\'ai montr\xe9 comment paginer tes r\xe9sultats avec Spring MVC.\\n\\nJ\'esp\xe8re que tu as appris des choses. Et j\'esp\xe8re que tu as envie d\'en apprendre encore plus. Parce que ce n\'est pas fini. Et je te donne rendez-vous au prochain article pour filtrer tes r\xe9sultats gr\xe2ce aux `Specification` de Spring.\\n\\nSi tu as envie que j\'explique plus avant certains concepts ou que je parle de quelque chose en particulier, n\'h\xe9site pas \xe0 me le dire dans les commentaires.\\n\\nPour ne pas rater les prochains articles, abonne-toi \xe0 un flux (tu as le choix entre [RSS](https://nathaniel-vaur-henel.github.io/blog/rss.xml), [Atom](https://nathaniel-vaur-henel.github.io/blog/atom.xml) et [Json](https://nathaniel-vaur-henel.github.io/blog/feeed.json)) ou \xe0 la newsletter en [page d\'accueil](/)\xa0!\\n\\nEt bon entrainement\xa0!"},{"id":"/mermaid","metadata":{"permalink":"/blog/mermaid","source":"@site/blog/2024/2024-04-11.mermaid.md","title":"Mermaid, l\'outil de cr\xe9ation de diagrammes vite faits, bien faits","description":"Il n\'est pas toujours facile d\'imaginer un visuel convaincant pour illustrer sa pens\xe9e. Pour ceux qui n\'ont aucune notion de graphisme, ou qui ne veulent pas perdre de temps \xe0 utiliser un logiciel sp\xe9cifique, il existe un outil simple \xe0 utiliser\xa0: Mermaid.","date":"2024-04-11T00:00:00.000Z","tags":[{"inline":true,"label":"outil","permalink":"/blog/tags/outil"},{"inline":true,"label":"mermaid","permalink":"/blog/tags/mermaid"},{"inline":true,"label":"markdown","permalink":"/blog/tags/markdown"}],"hasTruncateMarker":true,"authors":[{"name":"Nathaniel Vaur Henel","title":"Tech Lead, D\xe9veloppeur s\xe9nior, formateur et cr\xe9ateur de contenu","description":"Fort de deux d\xe9cennies de d\xe9veloppement, j\'ai acquis une expertise technique en d\xe9veloppement back-end Java associ\xe9 au framework Spring. Avec le temps, j\'ai d\xe9velopp\xe9 une approche \\"artisanale\\" du code, avec la volont\xe9 de maitriser toute la chaine de comp\xe9tences, du recueil du besoin \xe0 la maintenance, avec un souci d\'efficacit\xe9 et de qualit\xe9.","page":{"permalink":"/blog/authors/nathaniel-vaur-henel"},"socials":{"dev sensei":"https://nathaniel-vaur-henel.github.io/crafters/nathaniel-vaur-henel","linkedin":"https://www.linkedin.com/in/nathaniel-vaur-henel/","github":"https://github.com/nathaniel-vaur-henel","malt":"https://www.malt.fr/profile/nathanielvaurhenel"},"imageURL":"https://github.com/Nathaniel-Vaur-Henel.png","key":"nvh"}],"frontMatter":{"slug":"/mermaid","title":"Mermaid, l\'outil de cr\xe9ation de diagrammes vite faits, bien faits","authors":"nvh","tags":["outil","mermaid","markdown"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Paginer ses r\xe9sultats avec Spring","permalink":"/blog/spring-pagination"},"nextItem":{"title":"D\xe9velopper son premier projet Spring : poser de bonnes bases","permalink":"/blog/continue-spring"}},"content":"Il n\'est pas toujours facile d\'imaginer un visuel convaincant pour illustrer sa pens\xe9e. Pour ceux qui n\'ont aucune notion de graphisme, ou qui ne veulent pas perdre de temps \xe0 utiliser un logiciel sp\xe9cifique, il existe un outil simple \xe0 utiliser\xa0: [Mermaid](https://mermaid.js.org/).\\nAvec quelques lignes de textes, il est possible de cr\xe9er des diagrammes de toutes sortes, int\xe9grables directement dans une page web ou un fichier Markdown.\\n\\nVoyons ensemble ses avantages et comment tirer parti ses fonctionnalit\xe9s.\\n\\nUn sujet un peu plus l\xe9ger que les pr\xe9c\xe9dents, mais tout aussi int\xe9ressant. Ne t\'inqui\xe8te pas, je continuerai \xe0 te parler de Spring, mais l\xe0, j\'ai envie de te parler de [Mermaid](https://mermaid.js.org/).\\n\\n\x3c!--truncate--\x3e\\n\\n## Mermaid, des diagrammes faciles \xe0 r\xe9aliser et \xe0 int\xe9grer\\n\\nDans mon article pr\xe9c\xe9dent sur [Spring](2024-03-01.continue_spring.md), j\'ai mis ce \\"magnifique\\" [diagramme](2024-03-01.continue_spring.md#le-processus-dune-action-initialis\xe9e-par-le-client) que j\'ai fait tout seul. Comme j\'ai eu d\'excellents retours, je me suis dit que j\'allais te donner mon secret. J\'ai utilis\xe9 [Mermaid](https://mermaid.js.org/). Ce superbe diagramme a \xe9t\xe9 cr\xe9\xe9 avec une trentaine de ligne de _texte_. Et c\'est tout. \\n\\nMais alors, qu\'est-ce que [Mermaid](https://mermaid.js.org/)\xa0? C\'est une librairie JavaScript qui te permet de faire des diagrammes, des graphiques, des sch\xe9mas, des trucs visuels quoi. Et tout \xe7a, directement dans ton Markdown ou dans ta page web.\\n\\nUn petit exemple pour la route\xa0:\\n\\n```mermaid\\ngraph TD\\n    A[Je lis des blogs] --\x3e B{celui de Nathaniel\xa0?}\\n    B --\x3e|Oui| C{Je continue de le lire car j\'aime}\\n    B --\x3e|Non| X[Qu\'est ce que tu fais ici\xa0?]\\n    X --\x3e|essaie encore| A\\n    C --\x3e|Oui| D[Je le partage]\\n    D --\x3e|Et aussi| E[Je commente]\\n    C --\x3e|Non| X\\n```\\n\\nCe diagramme m\'a pris 5 minutes \xe0 faire. Le plus long\xa0? Trouver l\'id\xe9e. Il est directement int\xe9gr\xe9 dans mon article, je n\'ai pas utilis\xe9 de logiciel externe de dessin, il est responsive et p\xe8se 8 lignes. Tu ne me crois pas\xa0? Les voici\xa0:\\n\\n```text\\ngraph TD\\n    A[Je lis des blogs] --\x3e B{celui de Nathaniel\xa0?}\\n    B --\x3e|Oui| C{Je continue de le lire car j\'aime}\\n    B --\x3e|Non| X[Qu\'est ce que tu fais ici\xa0?]\\n    X --\x3e|essaie encore| A\\n    C --\x3e|Oui| D[Je le partage]\\n    D --\x3e|Et aussi| E[Je commente]\\n    C --\x3e|Non| X\\n```\\n\\nTu peux aussi le tester dans le [Mermaid live editor](https://mermaid.live/edit#pako:eNpVkM1OwzAQhF9l5Usv7QvkQNUmvSBRhOBQKelhsTeNK_8Ee31ASd4dJwEBe7Jmv1mPZhDSKxKFuAXsO3irGgd5DvUjgdERFEV4N_4Wr7DbPcBxkGSSzjKckTt0mgzsp9V0nJHxOekRyiH7pXesXaKZNvO5kDUMcN-gtvTPdPZuhEv9kjYUGSTBR7ZxghZzBi017K8rfllwihE1ATnpA41wWHfl7__Vkp-gx8B4o29ztQAnBkwxZupULymtJcc_TPknj9gKS8GiVrmgYd43gjuy1IgiPxW1mAw3onFTRjGxf_10UhQcEm1F6hUyVRpztVYULZqYVVKafXhaS1-6n74AYr18iQ). Je t\'en reparlerai.\\n\\n### Mermaid, un outil de cr\xe9ation de diagrammes aux multiples fonctionnalit\xe9s\\n\\nComme toujours, si tu veux tout savoir, va lire la [doc officielle](https://mermaid.js.org/intro/). Mais je vais quand m\xeame te pr\xe9senter les bases de Mermaid\xa0: \\n- Quand j\'\xe9cris ce blog, Mermaid sait g\xe9rer une vingtaine de types de diagrammes diff\xe9rents, dont 3 ou 4 en beta.\\n- Tu peux cr\xe9er et tester tes diagrammes en ligne avec le [Mermaid live editor](https://mermaid.live).\\n- Diff\xe9rents [th\xe8mes](https://mermaid.js.org/config/theming.html) sont disponibles pour personnaliser tes diagrammes. Et tu peux les personnaliser toi-m\xeame si tu veux.\\n- Mermaid se veut [accessible](https://mermaid.js.org/config/accessibility.html).\\n- Si tu veux, tu peux aussi exporter tes diagrammes en SVG ou PNG gr\xe2ce \xe0 la [Mermaid CLI](https://github.com/mermaid-js/mermaid-cli).\\n- Je viens de l\'apprendre en r\xe9digeant cet article et je trouve \xe7a g\xe9nial\xa0! Tu peux faire des diagrammes [Math\xe9matiques](https://mermaid.js.org/config/math.html)\xa0:\\n  ```mermaid\\n   graph LR\\n      A[\\"$$x^2$$\\"] --\x3e|\\"$$\\\\sqrt{x+3}$$\\"| B(\\"$$\\\\frac{1}{2}$$\\")\\n      A --\x3e|\\"$$\\\\overbrace{a+b+c}^{\\\\text{note}}$$\\"| C(\\"$$\\\\pi r^2$$\\")\\n      B --\x3e D(\\"$$x = \\\\begin{cases} a &\\\\text{if } b \\\\\\\\ c &\\\\text{if } d \\\\end{cases}$$\\")\\n      C --\x3e E(\\"$$x(t)=c_1\\\\begin{bmatrix}-\\\\cos{t}+\\\\sin{t}\\\\\\\\ 2\\\\cos{t} \\\\end{bmatrix}e^{2t}$$\\")\\n  ```\\n  Au moment o\xf9 j\'\xe9cris cet article, cette fonctionnalit\xe9 n\'est pas disponible partout. Par exemple, elle est disponible dans le [live editor](https://mermaid.live/edit#pako:eNpVkctqwzAQRX9lGExJcLKIuzOk0CTdddUuO3WR5XFiiO1UHhcXRf9e-RUarcSZq3NhZFHXGWOMAEejLid4faMKhvP8QRgEXRIFAeEnrNdP1x4QNd9GbBc-un5whd1ixLlR2m6cjQa-vGn-vax_2KQ-xlaFaahdYomEO7FVLewm337yXQowY_nNtetdcBgCHWyBKOVjUVmtGm4cKHiYfEUODlI_JwJ9TzNPucqmN3f6_aB_GfULWW7112auSEslpujcmkjXjRUX-kV4Lm4oiWY82ec4JzaSsQVXWLIpVZH5ddu-k1BOXDJh7K8Z56o9CyFVzkdVK_X7b6UxFtPyCttLpoQPhfLfVGKcq3PD7g83OYz6) ou dans Docusaurus, mais pas encore dans le plugin [JetBrains](https://plugins.jetbrains.com/plugin/20146-mermaid) ni sur [GitHub](https://github.com/Nathaniel-Vaur-Henel/nathaniel-vaur-henel.github.io/wiki/Diagrammes-avec-Mermaid#test-de-diagramme-de-math%C3%A9matiques).\\n\\nBien s\xfbr, je n\'ai pas tout list\xe9. Prends le temps de lire la [doc officielle](https://mermaid.js.org/intro/) pour en savoir plus.\\n\\n### Les diff\xe9rentes possibilit\xe9s d\'int\xe9gration de Mermaid\\n\\n#### Dans un fichier Markdown\\n\\nSi Markdown est pris en charge l\xe0 o\xf9 tu veux faire ton diagramme, tu peux\\ncertainement utiliser [Mermaid](https://mermaid.js.org/). Par exemple, il est pris en charge nativement dans [GitLab](https://gitlab.com/) et [GitHub](https://github.com/) dans tous les fichiers `.md`. C\'est pratique pour mettre des diagrammes dans ton `README.md` par exemple.\\n\\nParfois, il faut installer un plugin, comme dans [Jira](https://www.atlassian.com/software/jira) ou [Docusaurus](https://docusaurus.io/).\\n\\nTu trouveras une liste des diverses int\xe9grations sur le [site officiel de Mermaid](https://mermaid.js.org/ecosystem/integrations-community.html). C\'est ce que j\'ai fait pour mon site, qui utilise [Docusaurus](https://docusaurus.io/).\\n\\n:::info L\'astuce de ton dev sensei\\n\\nComme Mermaid est int\xe9gr\xe9 \xe0 GitHub et \xe0 GitLab. Tu peux cr\xe9er tes\\ndiagrammes et autres sch\xe9mas directement dans les diff\xe9rents fichiers markdown de ton repository, le `README.md` par exemple, ou dans le wiki, comme cet [exemple dans un wiki GitHub](https://github.com/Nathaniel-Vaur-Henel/nathaniel-vaur-henel.github.io/wiki/Diagrammes-avec-Mermaid).\\n\\n:::\\n\\nTu trouveras facilement un plugin pour ton IDE pr\xe9f\xe9r\xe9. Par exemple, pour [IntelliJ IDEA](https://www.jetbrains.com/idea/), tu as un [plugin Mermaid](https://plugins.jetbrains.com/plugin/20146-mermaid) qui te permet de visualiser les diagrammes Mermaid directement dans ton \xe9diteur.\\n\\n#### Sur un site web\\n\\nTu peux aussi l\'utiliser directement dans une page web. Il te suffit d\'ajouter le script mermaid et le tour est jou\xe9. Voici l\'exemple d\'impl\xe9mentation issu du site de Mermaid que tu peux retrouver [ici](https://mermaid.js.org/config/usage.html#simple-full-example)\xa0:\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<body>\\n<pre class=\\"mermaid\\">\\n  graph LR\\n      A --- B\\n      B--\x3eC[fa:fa-ban forbidden]\\n      B--\x3eD(fa:fa-spinner);\\n    </pre>\\n<script type=\\"module\\">\\n  import mermaid from \'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs\';\\n<\/script>\\n</body>\\n</html>\\n```\\n\\nJe l\'ai test\xe9 en local, \xe7a marche vraiment tout seul\xa0!\\n\\n#### Avec un \xe9diteur en ligne\\n\\nEt sinon, tu as toujours la solution du [live editor Mermaid](https://mermaid.live/edit), un site web qui te fait le rendu de ton code Mermaid en temps r\xe9el. Il contient quelques exemples aussi, qui te permettront de d\xe9couvrir Mermaid. Ce [live editor](https://mermaid.live/edit) te permet aussi de t\xe9l\xe9charger ton diagramme, sous divers formats comme le SVG ou le PNG. C\'est tr\xe8s pratique pour ajouter un beau diagramme \xe0 ta pr\xe9sentation ou \xe0 ton document.\\n\\n## Mermaid, une grande diversit\xe9 de diagrammes \xe0 port\xe9e de main\\n\\nJe vais te pr\xe9senter quelques types de diagrammes que tu peux faire avec Mermaid. Si tu veux en savoir plus, tu as, comme toujours, la [doc officielle](https://mermaid.js.org/intro/).\\n\\n### Diagramme de flux\\n\\nTu peux choisir le sens de ton diagramme de flux tr\xe8s simplement.\\n\\n```mermaid\\n---\\ntitle: De haut en bas\\n---\\ngraph TD\\n    A --\x3e B\\n    B --\x3e C\\n    A --\x3e D\\n    D --\x3e E\\n```\\n\\n```text title=\\"Le code pour le diagramme de flux \'de haut en bas\'\\"\\n---\\ntitle: De haut en bas\\n---\\ngraph TD\\n    A --\x3e B\\n    B --\x3e C\\n    A --\x3e D\\n    D --\x3e E\\n\\n```\\n\\n\\n```mermaid\\n---\\ntitle: De gauche \xe0 droite\\n---\\ngraph LR\\n    A --\x3e B\\n    B --\x3e C\\n    A --\x3e D\\n    D --\x3e E\\n```\\n\\n```text title=\\"Le code pour le diagramme de flux \'de gauche \xe0 droite\'\\"\\n---\\ntitle: De gauche \xe0 droite\\n---\\ngraph LR\\n    A --\x3e B\\n    B --\x3e C\\n    A --\x3e D\\n    D --\x3e E\\n```\\n\\nTu peux aussi choisir le style de tes liens, la forme de tes n\u0153uds, et appliquer des styles CSS \xe0 tes n\u0153uds et tes liens.\\n\\n```mermaid\\n---\\ntitle: Exemple de style\\n---\\ngraph LR\\n  A[[A]] -.-> B{{B}}\\n  A --- B\\n  B ==> C((C))\\n  A <--\x3e|un peu de texte?| D[(D)]\\n  D x--x E\\n  D o--o E\\n    style B fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5\\n    style C fill:#f9f,stroke:#333,stroke-width:4px\\n```\\n\\n```text title=\\"Le code pour le diagramme de flux \'Exemple de style\'\\"\\n---\\ntitle: Exemple de style\\n---\\ngraph LR\\n  A[[A]] -.-> B{{B}}\\n  A --- B\\n  B ==> C((C))\\n  A <--\x3e|un peu de texte?| D[(D)]\\n  D x--x E\\n  D o--o E\\n    style B fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5\\n    style C fill:#f9f,stroke:#333,stroke-width:4px\\n```\\n\\n### Diagramme de s\xe9quence\\n\\nTu peux aussi faire des diagrammes de s\xe9quence, ce qui est tr\xe8s utile pour expliquer des processus, des interactions, des sc\xe9narios. C\'est celui que j\'ai utilis\xe9 dans mon article sur [Spring](2024-03-01.continue_spring.md#le-processus-dune-action-initialis\xe9e-par-le-client).\\n\\n```mermaid\\n---\\ntitle: Une petite discussion\\n---\\nsequenceDiagram\\n    actor N as Nathaniel\\n    participant T as Toi\\n    N->>T: Salut Toi, comment \xe7a va\xa0?\\n    T->>N: Salut Nathaniel, \xe7a va bien et toi\xa0?\\n    N->>T: \xc7a va, je suis en train de te parler de Mermaid\\n    T->>N: Ah, c\'est cool, je vais aller voir \xe7a\xa0!\\n```\\n\\n```text title=\\"Le code pour le diagramme de s\xe9quence \'Une petite discussion\'\\"\\n    participant N as Nathaniel\\n    participant T as Toi\\n    N->>T: Salut Toi, comment \xe7a va\xa0?\\n    T->>N: Salut Nathaniel, \xe7a va bien et toi\xa0?\\n    N->>T: \xc7a va, je suis en train de te parler de Mermaid\\n    T->>N: Ah, c\'est cool, je vais aller voir \xe7a\xa0!\\n```\\n\\nDans ce type de diagramme, tu peux aussi choisir tes fl\xe8ches, les styles de tes participants, et plein d\'autres choses. Tu peux consulter la [doc sur les Sequence Diagrams](https://mermaid.js.org/syntax/sequenceDiagram.html). \\n\\n### Diagramme de Classes\\n\\nTu peux aussi faire des diagrammes de classes pour expliquer des structures de donn\xe9es, des relations entre objets, des h\xe9ritages. \\n\\n```mermaid\\n---\\ntitle: Un exemple de diagramme de classes\\n---\\nclassDiagram\\n  class page {\\n    url string\\n    titre string\\n    contenu byte[]\\n    estCommentable() boolean\\n  }\\n  class blog {\\n    tempsDeLecture int\\n    auteur string\\n    dateDePublication date\\n  }\\n  class devento {\\n    ficheTechnique string\\n    aideM\xe9moire string\\n  }\\n  class devWorkout {\\n    exercice string[]\\n    solution string[]\\n  }\\n  page <|-- devento\\n  page <|-- devWorkout\\n  page <|-- blog\\n```\\n\\n```text title=\\"Le code pour le diagramme de classes \'Un exemple de diagramme de classes\'\\"\\n---\\ntitle: Un exemple de diagramme de classes\\n---\\nclassDiagram\\n  class page {\\n    url string\\n    titre string\\n    contenu byte[]\\n    estCommentable() boolean\\n  }\\n  class blog {\\n    tempsDeLecture int\\n    auteur string\\n    dateDePublication date\\n  }\\n  class devento {\\n    ficheTechnique string\\n    aideM\xe9moire string\\n  }\\n  class devWorkout {\\n    exercice string[]\\n    solution string[]\\n  }\\n  page <|-- devento\\n  page <|-- devWorkout\\n  page <|-- blog\\n```\\n\\nTu peux utiliser des symboles pour les modificateurs de visibilit\xe9, diff\xe9rentes fl\xe8ches pour les diff\xe9rentes relations, tu peux d\xe9finir des namespaces, des interfaces, des abstractions, de la cardinalit\xe9 et bien d\'autres choses\xa0! Comme toujours, pour en savoir plus, tu as la [doc sur les Class Diagrams](https://mermaid.js.org/syntax/classDiagram.html).\\n\\n### Les camemberts\\n\\nComment te parler de diagrammes sans te parler de camemberts\xa0? Moi, j\'adore\xa0! Tu peux les utiliser pour expliquer des r\xe9partitions, des pourcentages, des parts de march\xe9. \\n\\n```mermaid\\n---\\ntitle: Un exemple de fromage\\n---\\npie showData\\n    \\"Camembert\\" : 10\\n    \\"Brie\\" : 5\\n    \\"Reblochon\\" : 20\\n    \\"Emmental\\" : 4\\n```\\n\\n```text title=\\"Le code pour le diagramme de camembert \'Un exemple de fromage\'\\"\\n---\\ntitle: Un exemple de fromage\\n---\\npie showData\\n    \\"Camembert\\" : 10\\n    \\"Brie\\" : 5\\n    \\"Reblochon\\" : 20\\n    \\"Emmental\\" : 4\\n```\\n\\nTu peux remarquer que [Mermaid](https://mermaid.js.org/) calcule automatiquement les pourcentages. Il n\'y a pas grand-chose \xe0 savoir sur les camemberts, mais si tu veux en savoir plus, tu as la [doc sur les Pie Charts](https://mermaid.js.org/syntax/pie.html).\\n\\n### Le diagramme Git\\n\\nLe diagramme Git est vraiment g\xe9nial. Tu peux faire des diagrammes de branches Git qui te servent \xe0 expliquer des branches, des merges, des rebases. \\n\\n```mermaid\\n---\\ntitle: Un exemple de diagramme Git\\n---\\ngitGraph\\n  commit id: \\"custom\\"\\n  commit type: REVERSE\\n  branch develop\\n  commit\\n  commit tag:\\"v1.0.0\\"\\n  commit\\n  checkout main\\n  commit\\n  commit\\n  merge develop\\n  commit\\n  commit type: HIGHLIGHT\\n```\\n\\n```text title=\\"Le code pour le diagramme de Git \'Un exemple de diagramme Git\'\\"\\n---\\ntitle: Un exemple de diagramme Git\\n---\\ngitGraph\\n  commit id: \\"custom\\"\\n  commit type: REVERSE\\n  branch develop\\n  commit\\n  commit tag:\\"v1.0.0\\"\\n  commit\\n  checkout main\\n  commit\\n  commit\\n  merge develop\\n  commit\\n  commit type: HIGHLIGHT\\n```\\n\\nComme toujours, je ne te montre qu\'un aper\xe7u. Va voir la [doc sur les Git Graphs](https://mermaid.js.org/syntax/gitgraph.html) pour en savoir plus.\\n\\nSi tu veux voir un sch\xe9ma plus complexe, tu en trouveras dans la [doc sur les Git Graphs](https://mermaid.js.org/syntax/gitgraph.html#hiding-branch-names-and-lines). Il y en a qui ressemblent plus \xe0 une carte de transport en commun qu\'\xe0 un sch\xe9ma Git.\\n\\n## Pour aller plus loin\\n\\nVoici quelques liens pour approfondir les sujets abord\xe9s dans cet article en attendant le prochain article\xa0!\\n\\n- [Mermaid JS](https://mermaid.js.org/)\\n- Wikipedia\xa0:\\n  - [Diagramme](https://fr.wikipedia.org/wiki/Diagramme)\\n  - [Mermaid](https://en.wikipedia.org/wiki/Mermaid)\\n\\n## Conclusion\\n\\nPour cet article plus court que les pr\xe9c\xe9dents, je t\'ai pr\xe9sent\xe9 un super outil pour faire des diagrammes et des sch\xe9mas facilement. Je t\'ai expliqu\xe9 o\xf9 et comment l\'utiliser, et je t\'ai montr\xe9 quelques exemples.\\n\\nJ\'esp\xe8re que tu as appris des choses. Et j\'esp\xe8re que tu as envie d\'en apprendre encore plus. Parce que c\'est pas fini. Et je te donne rendez-vous dans le prochain article, pour la suite de Spring\xa0? Ou pour un autre sujet\xa0?\\n\\nSi tu as envie que j\'explique plus en avant certains concepts ou que je parle de quelque chose en particulier, n\'h\xe9site pas \xe0 me le dire dans les commentaires.\\n\\nEt bon entrainement\xa0!"},{"id":"/continue-spring","metadata":{"permalink":"/blog/continue-spring","source":"@site/blog/2024/2024-03-01.continue_spring.md","title":"D\xe9velopper son premier projet Spring : poser de bonnes bases","description":"Que l\'on soit un d\xe9veloppeur Java d\xe9butant ou non, il est n\xe9cessaire de consulter un tutoriel complet avant de lancer son premier projet Spring. En effet, ce framework peut \xeatre difficile \xe0 prendre en main. Une bonne technique d\'approche est n\xe9cessaire pour ne pas se perdre dans son apprentissage. La plupart des tutoriels que j\'ai vus jusqu\'ici m\'ont sembl\xe9 trop compliqu\xe9s pour \xeatre utilis\xe9s sur un premier projet. Cet article propose de cr\xe9er un projet Spring simple qui permet d\'assimiler les bases sans s\'encombrer de la complexit\xe9 du framework.","date":"2024-03-01T00:00:00.000Z","tags":[{"inline":true,"label":"Java","permalink":"/blog/tags/java"},{"inline":true,"label":"Spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"langage","permalink":"/blog/tags/langage"},{"inline":true,"label":"d\xe9veloppement","permalink":"/blog/tags/developpement"},{"inline":true,"label":"tuto","permalink":"/blog/tags/tuto"}],"hasTruncateMarker":true,"authors":[{"name":"Nathaniel Vaur Henel","title":"Tech Lead, D\xe9veloppeur s\xe9nior, formateur et cr\xe9ateur de contenu","description":"Fort de deux d\xe9cennies de d\xe9veloppement, j\'ai acquis une expertise technique en d\xe9veloppement back-end Java associ\xe9 au framework Spring. Avec le temps, j\'ai d\xe9velopp\xe9 une approche \\"artisanale\\" du code, avec la volont\xe9 de maitriser toute la chaine de comp\xe9tences, du recueil du besoin \xe0 la maintenance, avec un souci d\'efficacit\xe9 et de qualit\xe9.","page":{"permalink":"/blog/authors/nathaniel-vaur-henel"},"socials":{"dev sensei":"https://nathaniel-vaur-henel.github.io/crafters/nathaniel-vaur-henel","linkedin":"https://www.linkedin.com/in/nathaniel-vaur-henel/","github":"https://github.com/nathaniel-vaur-henel","malt":"https://www.malt.fr/profile/nathanielvaurhenel"},"imageURL":"https://github.com/Nathaniel-Vaur-Henel.png","key":"nvh"}],"frontMatter":{"slug":"/continue-spring","title":"D\xe9velopper son premier projet Spring : poser de bonnes bases","authors":"nvh","tags":["Java","Spring","langage","d\xe9veloppement","tuto"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Mermaid, l\'outil de cr\xe9ation de diagrammes vite faits, bien faits","permalink":"/blog/mermaid"},"nextItem":{"title":"D\xe9buter avec Spring gr\xe2ce \xe0 Spring Initializr","permalink":"/blog/begin-spring"}},"content":"Que l\'on soit un d\xe9veloppeur Java d\xe9butant ou non, il est n\xe9cessaire de consulter un tutoriel complet avant de lancer son premier projet Spring. En effet, ce framework peut \xeatre difficile \xe0 prendre en main. Une bonne technique d\'approche est n\xe9cessaire pour ne pas se perdre dans son apprentissage. La plupart des tutoriels que j\'ai vus jusqu\'ici m\'ont sembl\xe9 trop compliqu\xe9s pour \xeatre utilis\xe9s sur un premier projet. Cet article propose de cr\xe9er un projet Spring simple qui permet d\'assimiler les bases sans s\'encombrer de la complexit\xe9 du framework.\\n\\n\x3c!--truncate--\x3e\\n\\n## Concevoir un premier projet Spring avec Spring Initializr\\n\\nDans [l\'article pr\xe9c\xe9dent](/blog/2024/2024-02-15.begin_spring.md), je t\'ai expliqu\xe9 comment cr\xe9er un projet Spring avec Spring Initializr. Il s\'agit selon moi du moyen le plus efficace de se lancer avec Spring. Cet article \xe9tant la suite directe, je t\'en recommande la lecture si ce n\'est d\xe9j\xe0 fait.\\n\\nLe but maintenant est de se familiariser avec les annotations de base de Spring. Pour ce faire, je te propose de cr\xe9er sur un petit sac fourre-tout afin de te familiariser avec les fonctionnalit\xe9s de base.\\nReprends le projet cr\xe9\xe9 pour l\'article pr\xe9c\xe9dent, et compl\xe9tons-le ensemble.\\n\\n:::warning\\n\\nComme pr\xe9c\xe9demment, je vais consid\xe9rer que tu as d\xe9j\xe0 des bases en Java. Si ce n\'est pas le cas, je te conseille de commencer par l\xe0. Tu trouveras plein de ressources sur le net pour apprendre Java. J\'ai toujours aim\xe9 les cours d\'[OpenClassrooms](https://openclassrooms.com/fr/courses/6173501-apprenez-a-programmer-en-java), mais il y en a plein d\'autres. Et tu pourras trouver quelques conseils sur ce site.\\n\\n:::\\n\\nNous allons cr\xe9er un sac ~~de grain de caf\xe9~~ fourre-tout. Le but\xa0: faire une liste d\'objets (ou de ce qu\'on veut, c\'est un sac super magique).  \\nNous allons donc cr\xe9er de quoi\xa0:\\n\\n1. Ajouter des choses.\\n2. Lister les choses.\\n3. Lire une chose.\\n4. Modifier une chose.\\n5. Supprimer une chose.\\n\\nEt c\'est d\xe9j\xe0 pas mal.\\n\\n:::warning\\n\\nIl y a plusieurs techniques, plusieurs \xe9coles, plusieurs mani\xe8res de faire. Je vais t\'en montrer une. Elle est simple et efficace, mais tu pourras trouver d\'autres mani\xe8res de faire. Le but, c\'est de te montrer les bases, et apr\xe8s, tu pourras faire comme tu veux. Ou comme tu dois.\\n\\n:::\\n\\n:::note\\n\\nJe ferai certainement des [Devento](/devento) pour expliquer tout ce que je vais te pr\xe9senter, mais pour l\'instant, je te conseille de lire les liens que je t\'ai mis. Et tu peux aussi faire des recherches dans ton moteur de recherche pr\xe9f\xe9r\xe9. Et sur les sites de r\xe9f\xe9rence que j\'ai mis dans le pied de page du site\xa0!\\n\\n:::\\n\\n### L\'application\\n\\nNous allons faire une application serveur en [REST](https://fr.wikipedia.org/wiki/Representational_state_transfer)\xa0: nous allons d\xe9finir des [endpoints](https://en.wikipedia.org/wiki/Endpoint_interface) pour faire des actions sur notre sac.\\n\\nLes [verbes, ou m\xe9thodes, HTTP](https://fr.wikipedia.org/wiki/Hypertext_Transfer_Protocol#M%C3%A9thodes) que nous allons utiliser sont\xa0:\\n\\n- `GET` pour lire des donn\xe9es.\\n- `POST` pour cr\xe9er des donn\xe9es.\\n- `PUT` pour modifier des donn\xe9es.\\n- `DELETE` pour supprimer des donn\xe9es.\\n\\n### L\'architecture\\n\\nNous allons partir sur une architecture tr\xe8s simple et tr\xe8s d\xe9coup\xe9e d\'application server. Voici les types de classes que nous allons cr\xe9er\xa0:\\n\\n- Une `Entity`, qui repr\xe9sente un objet en bases de donn\xe9es.\\n- Un `Repository`, qui permet de manipuler ces entit\xe9s.\\n- Des `UseCase`, qui permettent de faire des actions sur ces entit\xe9s. Tu as un `UseCase` par action.\\n- Un `Controller`, qui permet de faire le lien entre l\'application et l\'ext\xe9rieur.\\n- Un `DTO`, un [Data Transfer Object](https://fr.wikipedia.org/wiki/Objet_de_transfert_de_donn%C3%A9es), qui est l\'objet que s\'\xe9changeront notre serveur et ses clients.\\n- Un `Mapper`, qui permet de faire le lien entre les entit\xe9s et les DTO.\\n\\nUne classe, un r\xf4le. C\'est simple, c\'est efficace, c\'est facile \xe0 comprendre. Et c\'est le but et le leitmotiv de tout l\'article.\\n\\n### Le processus d\'une action initialis\xe9e par le client\\n\\nDans notre application, nos composants vont int\xe9ragir entre eux. Comme dit pr\xe9c\xe9demment, le mieux, c\'est que chacun aie sa propre responsabilit\xe9.  \\nVoici un r\xe9sum\xe9 de qui fait quoi dans notre application\xa0:\\n\\n- Le `Client` envoie une requ\xeate HTTP au `Serveur`.\\n- Le `Serveur` distribue la requ\xeate [d\xe9s\xe9rialis\xe9e](https://fr.wikipedia.org/wiki/S%C3%A9rialisation) au `Controller` en validant les param\xe8tres. Si besoin, c\'est \xe0 ce moment, l\xe0 que le `DTO` apparait sous forme de param\xe8tre de requ\xeate.\\n- Le `Controller` demande au `UseCase` d\'effectuer la t\xe2che, en lui passant les param\xe8tres dont il aura besoin.\\n- Le `UseCase` effectue la t\xe2che. C\'est l\xe0 que se trouve tout le m\xe9tier. C\'est lui qui fait appel aux autres composants.\\n  - S\'il a besoin de transformer un `DTO` en `Entity` ou inversement, il appelle un `Mapper`.\\n  - S\'il a besoin d\'un acc\xe8s \xe0 la base de donn\xe9e, il appelle un `Repository`.\\n  - S\'il a besoin d\'un autre composant, il l\'appelle directement.\\n- Le `UseCase` retourne un `DTO` ou une valeur au `Controller`.\\n- Le `Controller` retourne une r\xe9ponse HTTP au `Serveur` sous forme d\'objet Java.\\n- Le `Serveur` [serialise](https://fr.wikipedia.org/wiki/S%C3%A9rialisation) l\'objet java en requ\xeate HTTP qu\'il retourne au `Client`.\\n\\n```mermaid\\n---\\ntitle: Cheminement simplifi\xe9 d\'une requ\xeate HTTP \\n---\\nsequenceDiagram\\n    actor client as Client\\n    participant server as Server\\n    participant controller as Controller\\n    participant useCase as UseCase\\n    box Accessible seulement du UseCase\\n        participant mapper as Mapper\\n        participant repo as Repository\\n    end\\n\\n    client -) server: requ\xeate HTTP\\n    activate server\\n    server ->> controller: distribue\\n    activate controller\\n    controller ->> useCase: param\xe8tre / DTO\\n    activate useCase\\n    useCase ->> mapper: DTO\\n    activate mapper\\n    mapper ->> useCase: Entity\\n    deactivate mapper\\n    useCase ->> repo: param\xe8tre\\n    activate repo\\n    repo ->> useCase: Entity\\n    deactivate repo\\n    useCase ->> mapper: Entity\\n    activate mapper\\n    mapper ->> useCase: DTO\\n    deactivate mapper\\n    useCase ->> controller: DTO\\n    deactivate useCase\\n    controller ->> server: retourne\\n    deactivate controller\\n    server -) client: r\xe9ponse HTTP\\n    deactivate server\\n```\\n\\nPour r\xe9sumer, dans un `GET`:\\n\\n- Le `Client` est le composant qui envoie les requ\xeates HTTP au `Server` et qui re\xe7oit les r\xe9ponses HTTP du `Server`. Cela peut \xeatre une interface graphique, une autre application, un script, etc.\\n- Le `Server` est le composant qui re\xe7oit les requ\xeates HTTP du `Client` et qui retourne les r\xe9ponses HTTP au `Client`. Dans notre cas, c\'est un serveur Web Spring Boot.\\n- Le `Controller` est le point d\'entr\xe9e de l\'application. Il re\xe7oit les requ\xeates HTTP et retourne les r\xe9ponses HTTP. Il ne sait g\xe9rer que \xe7a\xa0!\\n- Le `UseCase` est le c\u0153ur de l\'application. Il ne sait pas g\xe9rer les requ\xeates HTTP. Il ne sait pas non plus g\xe9rer les acc\xe8s \xe0 la base de donn\xe9e. Il ne sait que g\xe9rer le m\xe9tier et demander aux autres composants de faire ce qu\'ils savent faire.\\n- Le `Mapper` est un composant qui transforme un `DTO` en `Entity` ou inversement.\\n- Le `Repository` est un composant qui g\xe8re les acc\xe8s \xe0 la base de donn\xe9e.\\n- Le `DTO` est un objet qui repr\xe9sente une requ\xeate HTTP ou une r\xe9ponse HTTP. Il est utilis\xe9 pour communiquer entre le `Controller` et le `UseCase`.\\n- L\'`Entity` est un objet qui repr\xe9sente une ligne de la base de donn\xe9e. Il est utilis\xe9 pour communiquer entre le `UseCase` et le `Repository`.\\n\\n:::note\\n\\nDans notre cas, c\'est Spring qui va s\'occuper de la [d\xe9s\xe9rialisation et de la s\xe9rialisation](https: //fr.wikipedia.org/wiki/S%C3%A9rialisation) des objets Java en requ\xeate HTTP. Tout seul, gr\xe2ce \xe0 la magie des annotations. Et gr\xe2ce \xe0 une library qui s\'appelle [Jackson](https://github.com/FasterXML/jackson)\\n\\n:::\\n\\n### Les d\xe9pendances\\n\\nNous allons utiliser les d\xe9pendances que nous avons ajout\xe9es dans le projet de l\'article [D\xe9buter avec Spring gr\xe2ce \xe0 Spring Initializr](2024-02-15.begin_spring.md#avant-de-commencer-pr\xe9sentation-des-d\xe9pendances).\\n\\nRien de plus.\\n\\n## \xc9crivons notre projet Spring\xa0!\\n\\n> On va Springer\xa9\xa0!\\n\\nCommen\xe7ons par le d\xe9but. Ou la fin, tout d\xe9pend du point de vue. Nous, nous allons faire les choses dans l\'ordre que je t\'ai donn\xe9 [plus haut](#larchitecture).\\n\\n:::note\\n\\nJ\'aime \xe9crire mon code tout en anglais. Comme tout, c\'est une question d\'habitude et de choix personnel ou d\'\xe9quipe. Par contre, je vais t\'\xe9crire toute la doc en fran\xe7ais pour plus de simplicit\xe9.\\n\\nPour faire simple, je vais tout mettre dans le m\xeame package m\xeame si ce n\'est pas recommand\xe9. Je traiterai plus tard les histoires de Clean architecture, d\'architecture hexagonale ou autres. Il n\'est pas n\xe9cessaire de conna\xeetre ces points pour avancer. D\'autres articles\xa0? Des [Devento](/devento)\xa0? On verra...\\n\\n:::\\n\\n:::info L\'astuce de ton dev sensei\\n\\nNe copie colle pas le code. Jamais. Enfin, pas tout de suite. Lis-le, comprends-le, et, pour \xe7a, \xe9cris-le. L\'apprentissage passe par l\xe0. Si tu lis cet article, tu as besoin de pratiquer. Alors commence maintenant. Tiens, je devrais \xe9crire un article sur la pratique, le copier-coller, et tout \xe7a...\\n\\n:::\\n\\n### \xc9crivons l\'Entity\\n\\nC\'est l\'objet, au sens [POO](https://fr.wikipedia.org/wiki/Programmation_orient%C3%A9e_objet), que nous allons manipuler en base de donn\xe9e. C\'est un simple objet, avec des attributs, des getters et des setters. C\'est tout. C\'est une classe Java, rien de plus.\\n\\nIl ne sera manipuler que par nos Use Cases et par notre repository. Le Controller n\'en aura jamais connaissance. Cela permet de d\xe9solidariser ton IHM de ta BDD.\\n\\n```java title=\\"SomethingEntity.java\\"\\npackage fr.nvh.begin.spring.bag;\\n\\nimport jakarta.persistence.Entity;\\nimport jakarta.persistence.GeneratedValue;\\nimport jakarta.persistence.GenerationType;\\nimport jakarta.persistence.Id;\\nimport lombok.Getter;\\nimport lombok.Setter;\\nimport lombok.ToString;\\n\\n@Entity // indique que cette classe est une entit\xe9 JPA, c\'est obligatoire pour que JPA puisse la g\xe9rer\\n@Getter // Lombok : g\xe9n\xe8re automatiquement les getters\\n@Setter // Lombok : g\xe9n\xe8re automatiquement les setters\\n@ToString // Lombok : g\xe9n\xe8re automatiquement la m\xe9thode toString()\\npublic class SomethingEntity {\\n\\n    @Id // indique \xe0 Hibernate que ce champ est la cl\xe9 primaire qui identifie de mani\xe8re unique chaque ligne en base, l\xe0 encore c\'est obligatoire\\n    @GeneratedValue(strategy = GenerationType.IDENTITY) // indique que c\'est le SGBD qui s\'occupe de g\xe9n\xe9rer les identifiants\\n    private Long id;\\n    private String name; // le nom de la chose\\n    private String description; // la description de la chose\\n\\n}\\n```\\n\\nVoil\xe0, j\'avais dit que j\'allais faire simple.\\n\\nBon, et si nous faisions un peu de base de donn\xe9es\xa0?\\n\\n### \xc9crivons le Repository\\n\\nLe repository est la classe qui va permettre de manipuler les entit\xe9s. C\'est une interface qui va \xeatre impl\xe9ment\xe9e par Spring Data JPA. C\'est une interface, tout simplement. Spring se chargera de l\'impl\xe9menter pour toi. Pas juste de l\'instancier, Spring va te l\'impl\xe9menter. Magique\xa0!\\n\\nEt quand je dis \\"tout simplement\\"\xa0:\\n\\n```java title=\\"SomethingRepository.java\\"\\npackage fr.nvh.begin.spring.bag;\\n\\nimport org.springframework.data.jpa.repository.JpaRepository;\\nimport org.springframework.stereotype.Repository;\\n\\n@Repository // indique que cette interface est un bean Spring de type Repository\\npublic interface SomethingRepository extends JpaRepository<SomethingEntity, Long> {\\n}\\n```\\n\\nEt voil\xe0. C\'est une interface qui \xe9tend une autre interface. Tu n\'as rien de plus \xe0 faire. Spring va te g\xe9n\xe9rer tout le code pour toi gr\xe2ce \xe0 l\'interface `JpaRepository`. Je t\'avais dit que Spring \xe9tait magique\xa0!\\n\\nLe `@Repository` est une annotation Spring qui indique que cette interface est un bean Spring de type Repository. Et hop, notre premier grain de caf\xe9 dans le sac.\\n\\n:::note\\n\\nSpring est m\xeame encore plus magique. Tu peux cr\xe9er des m\xe9thodes en respectant une [certaine nomenclature](https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html), et Spring va g\xe9n\xe9rer les requ\xeates SQL pour toi. Ce n\'est m\xeame de la magie \xe0 ce niveau-l\xe0, c\'est un miracle. Je t\'en parlerai un autre jour. Ou dans un [Devento](/devento).\\n\\nIl existe plusieurs types de repository qui contient des m\xe9thodes pr\xe9d\xe9finies. L\xe0, j\'ai pris `JpaRepository`, le plus complet et le plus simple \xe0 utiliser.\\n\\n:::\\n\\nAllez, nous allons quand m\xeame tester tout \xe7a. Est-ce que tu te souviens de [H2 Database](https://www.h2database.com/html/main.html)\xa0? C\'est le moment de le faire fonctionner.\\n\\n### Testons notre entit\xe9 et son repository\\n\\nRien de plus important qu\'un feedback r\xe9gulier. Je te conseille d\'avancer pas \xe0 pas et de tester \xe0 chaque \xe9tape. Comme les tests unitaires ne sont pas le sujet de cet article, je vais te montrer une astuce\xa0: le context Spring.\\n\\nVa dans ta classe principale, celle qui a le `@SpringBootApplication`, modifie la comme ceci\xa0:\\n\\n```java title=\\"DebuteAvecSpringApplication.java\\"\\npackage fr.nvh.begin.spring;\\n\\nimport fr.nvh.begin.spring.bag.SomethingEntity;\\nimport fr.nvh.begin.spring.bag.SomethingRepository;\\nimport org.springframework.boot.SpringApplication;\\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\\nimport org.springframework.context.ConfigurableApplicationContext;\\n\\n\\n@SpringBootApplication\\npublic class DebuteAvecSpringApplication {\\n\\n    public static void main(String[] args) {\\n        ConfigurableApplicationContext context = SpringApplication.run(DebuteAvecSpringApplication.class, args);\\n        SomethingRepository repository = context.getBean(SomethingRepository.class);\\n\\n        // Cr\xe9ation d\'une instance de SomethingEntity\\n        SomethingEntity myFirstThing = new SomethingEntity();\\n        myFirstThing.setName(\\"My first thing\\");\\n        myFirstThing.setDescription(\\"This is my first thing\\");\\n        // Affichage dans la console pour voir ce qu\'elle contient\\n        System.out.println(\\"not saved thing = \\" + myFirstThing);\\n\\n        // Sauvegarde en base de donn\xe9es\\n        SomethingEntity save = repository.save(myFirstThing);\\n        // Affichage \xe0 nouveau dans la console pour voir ce qu\'elle contient\\n        System.out.println(\\"saved thing = \\" + myFirstThing);\\n\\n        // R\xe9cup\xe9ration de la chose de la base de donn\xe9es pour v\xe9rifier qu\'elle a bien \xe9t\xe9 sauvegard\xe9e\\n        repository.findById(save.getId()).ifPresent(thing -> System.out.println(\\"read thing = \\" + thing));\\n\\n        // Affichage de toutes les choses en base de donn\xe9es\\n        System.out.println(\\"All things : \\");\\n        repository.findAll().forEach(thing -> System.out.println(\\" - \\" + thing));\\n    }\\n}\\n```\\n\\nDans la console, apr\xe8s les logs Spring, tu vas voir appara\xeetre nos `System.out.println`\xa0:\\n\\n```text\\nnot saved thing = SomethingEntity(id=null, name=My first thing, description=This is my first thing)\\nsaved thing = SomethingEntity(id=1, name=My first thing, description=This is my first thing)\\nread thing = SomethingEntity(id=1, name=My first thing, description=This is my first thing)\\nAll things : \\n - SomethingEntity(id=1, name=My first thing, description=This is my first thing)\\n```\\n\\nTu as cr\xe9\xe9 une entit\xe9, tu l\'as sauvegard\xe9e, tu l\'as lue, et tu as affich\xe9 toutes les entit\xe9s. C\'est tout. C\'est magique. C\'est Spring.\\n\\n:::note\\n\\nAvant la sauvegarde, l\'entit\xe9 n\'avait pas d\'identifiant. Apr\xe8s la sauvegarde, elle en a un. C\'est Spring et Hibernate qui s\'en sont occup\xe9. Magique, encore et toujours\xa0!\\n\\n:::\\n\\n:::warning\\n\\nN\'utilise jamais `System.out.println` en projet. C\'est juste pour te montrer que \xe7a marche et nous simplifier les logs\xa0! En projet, m\xeame perso, tu utiliseras un vrai logger. J\'y reviendrai dans un autre article. Encore.\\n\\n:::\\n\\nTu veux v\xe9rifier ta base de donn\xe9es\xa0? Lance ton serveur et va sur [http://localhost:8080/h2-console](http://localhost:8080/h2-console). Connecte-toi en utilisant les param\xe8tres indiqu\xe9s dans tes logs. Tu trouveras toutes les infos dans mon article pr\xe9c\xe9dent, dans la partie [Lancement de l\'application du projet g\xe9n\xe9r\xe9](http://localhost:3000/blog/begin-spring#lancement-de-lapplication-du-projet-g%C3%A9n%C3%A9r%C3%A9), sous partie des logs.\\n*Abracadabra\xa0!* Tu devrais voir ta table `SOMETHING_ENTITY` et les donn\xe9es que tu as ins\xe9r\xe9es.\\n\\n:::info L\'astuce de ton dev sensei\\n\\nLa JDBC URL change \xe0 chaque d\xe9marrage de l\'application. Tu peux la trouver dans les logs de ton application. Tu peux aussi la changer dans le fichier `application.properties` de ton projet. Ajoute la ligne `spring.datasource.url=jdbc:h2:mem:mydb` pour avoir toujours la m\xeame URL.\\n\\n:::\\n\\n### \xc9crivons le DTO\\n\\nLe DTO est la classe qui va permettre de faire le lien entre l\'entit\xe9 et le controller. C\'est un simple objet, avec des attributs, des getters et des setters. C\'est tout. Il s\'agit d\'une classe Java, rien de plus. Comme l\'entit\xe9, mais sans les annotations JPA.\\n\\n```java title=\\"SomethingDto.java\\"\\npackage fr.nvh.begin.spring.bag;\\n\\nimport lombok.Getter;\\nimport lombok.Setter;\\nimport lombok.ToString;\\n\\n@Getter // Lombok : g\xe9n\xe8re automatiquement les getters\\n@Setter // Lombok : g\xe9n\xe8re automatiquement les setters\\n@ToString // Lombok : g\xe9n\xe8re automatiquement la m\xe9thode toString\\npublic class SomethingDto {\\n\\n    private Long id;\\n    private String name;\\n    private String description;\\n\\n}\\n```\\n\\n### \xc9crivons le Mapper\\n\\nLe mapper est la classe qui va permettre de faire le lien entre l\'entit\xe9 et le DTO. C\'est une classe, avec des m\xe9thodes, qui vont permettre de convertir une entit\xe9 en DTO et un DTO en entit\xe9. Du coup, nous allons cr\xe9er deux m\xe9thodes, une pour chaque sens.\\n\\n```java title=\\"SomethingMapper.java\\"\\npackage fr.nvh.begin.spring.bag;\\n\\nimport org.springframework.stereotype.Component;\\n\\n@Component // indique que cette classe est un bean Spring de type Component\\npublic class SomethingMapper {\\n\\n    public SomethingDto toDto(SomethingEntity entity) {\\n        if (entity == null) {\\n            return null;\\n        }\\n        SomethingDto dto = new SomethingDto();\\n        dto.setId(entity.getId());\\n        dto.setName(entity.getName());\\n        dto.setDescription(entity.getDescription());\\n        return dto;\\n    }\\n\\n    public SomethingEntity toEntity(SomethingDto dto) {\\n        if (dto == null) {\\n            return null;\\n        }\\n        SomethingEntity entity = new SomethingEntity();\\n        entity.setId(dto.getId());\\n        entity.setName(dto.getName());\\n        entity.setDescription(dto.getDescription());\\n        return entity;\\n    }\\n}\\n```\\n\\nCette classe est un `@Component`, c\'est-\xe0-dire un bean Spring. Un autre grain de caf\xe9 dans le sac de Spring.\\n\\n:::info\\n\\nTu as des librairies qui te permettent de fare des mappers \xe0 grands coups... d\'annotations\xa0! Par exemple, [MapStruct](https://mapstruct.org/). Mais je te conseille de commencer par faire tes mappers \xe0 la main. C\'est plus simple, et \xe7a te permet de comprendre ce que tu fais. Tu pourras toujours utiliser MapStruct plus tard.\\n\\n:::\\n\\nAllez, testons ce mapper\xa0! Reprends la classe `DebuteAvecSpringApplication` et modifie-la comme ceci\xa0:\\n\\n```java title=\\"DebuteAvecSpringApplication.java\\"\\npackage fr.nvh.begin.spring;\\n\\nimport fr.nvh.begin.spring.bag.SomethingDto;\\nimport fr.nvh.begin.spring.bag.SomethingEntity;\\nimport fr.nvh.begin.spring.bag.SomethingMapper;\\nimport fr.nvh.begin.spring.bag.SomethingRepository;\\nimport org.springframework.boot.SpringApplication;\\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\\nimport org.springframework.context.ConfigurableApplicationContext;\\n\\n\\n@SpringBootApplication\\npublic class DebuteAvecSpringApplication {\\n\\n    public static void main(String[] args) {\\n        ConfigurableApplicationContext context = SpringApplication.run(DebuteAvecSpringApplication.class, args);\\n        testRepository(context);\\n        testMapper(context);\\n    }\\n\\n    private static void testMapper(ConfigurableApplicationContext context) {\\n        System.out.println(\\"*** Test du mapper ***\\");\\n        SomethingEntity entity = new SomethingEntity();\\n        entity.setId(1L); // on met un id pour voir si le mapper le prend en compte\\n        entity.setName(\\"Another thing\\");\\n        entity.setDescription(\\"This is another thing\\");\\n\\n        System.out.println(\\"not mapped entity = \\" + entity);\\n\\n        SomethingMapper mapper = context.getBean(SomethingMapper.class);\\n        SomethingDto dto = mapper.toDto(entity);\\n        System.out.println(\\"mapped DTO = \\" + dto);\\n\\n        SomethingEntity mappedEntity = mapper.toEntity(dto);\\n        System.out.println(\\"mappedEntity = \\" + mappedEntity);\\n\\n        // on teste aussi les cas limites\\n        System.out.println(\\"toDto(null) = \\" + mapper.toDto(null));\\n        System.out.println(\\"toEntity(null) = \\" + mapper.toEntity(null));\\n    }\\n\\n    private static void testRepository(ConfigurableApplicationContext context) {\\n        System.out.println(\\"*** Test du repository ***\\");\\n        SomethingRepository repository = context.getBean(SomethingRepository.class);\\n\\n        // Cr\xe9ation d\'une instance de SomethingEntity\\n        SomethingEntity myFirstThing = new SomethingEntity();\\n        myFirstThing.setName(\\"My first thing\\");\\n        myFirstThing.setDescription(\\"This is my first thing\\");\\n        // on l\'affiche dans la console pour voir ce qu\'elle contient\\n        System.out.println(\\"not saved thing = \\" + myFirstThing);\\n\\n        // on la sauvegarde en base de donn\xe9es\\n        SomethingEntity save = repository.save(myFirstThing);\\n        // on l\'affiche \xe0 nouveau dans la console pour voir ce qu\'elle contient\\n        System.out.println(\\"saved thing = \\" + myFirstThing);\\n\\n        // on la r\xe9cup\xe8re de la base de donn\xe9es pour v\xe9rifier qu\'elle a bien \xe9t\xe9 sauvegard\xe9e\\n        repository.findById(save.getId()).ifPresent(thing -> System.out.println(\\"read thing = \\" + thing));\\n\\n        // on affiche toutes les choses en base de donn\xe9es\\n        System.out.println(\\"All things : \\");\\n        repository.findAll().forEach(thing -> System.out.println(\\" - \\" + thing));\\n    }\\n}\\n```\\n\\nOui, j\'ai r\xe9\xe9crit le code. Ce sera plus simple \xe0 lire. Il est recommand\xe9 de faire des petites m\xe9thodes qui font une seule chose. Je pourrais faire un article l\xe0-dessus...\\n\\nAlors, maintenant, lance ton application. Tu devrais voir appara\xeetre dans la console\xa0:\\n\\n```text\\n*** Test du repository ***\\nnot saved thing = SomethingEntity(id=null, name=My first thing, description=This is my first thing)\\nsaved thing = SomethingEntity(id=1, name=My first thing, description=This is my first thing)\\nread thing = SomethingEntity(id=1, name=My first thing, description=This is my first thing)\\nAll things : \\n - SomethingEntity(id=1, name=My first thing, description=This is my first thing)\\n*** Test du mapper ***\\nnot mapped entity = SomethingEntity(id=1, name=Another thing, description=This is another thing)\\nmapped DTO = SomethingDto(id=1, name=Another thing, description=This is another thing)\\nmappedEntity = SomethingEntity(id=1, name=Another thing, description=This is another thing)\\ntoDto(null) = null\\ntoEntity(null) = null\\n```\\n\\nLa premi\xe8re partie `*** Test du repository ***` est d\xe9j\xe0 connue, je l\'ai juste mise en forme afin qu\'on la voie bien dans les logs. La deuxi\xe8me partie `*** Test du mapper ***` est nouvelle. Tu as cr\xe9\xe9 une entit\xe9, tu l\'as transform\xe9e en DTO, tu as transform\xe9 ce DTO en entit\xe9, et tu as test\xe9 les cas limites. Quand tu testes, tu testes tout\xa0: les cas normaux, les cas limites, les cas d\'erreurs. Tu sais quoi\xa0? Je t\'en parlerai dans un autre article. Ou dans un [Devento](/devento).\\n\\n### \xc9crivons le Controller\\n\\nComme je te l\'ai dit, le controller va nous permettre de faire le lien entre l\'application et l\'ext\xe9rieur. Tu d\xe9clares des m\xe9thodes avec des tas d\'annotations, et Spring va s\'occuper de tout. C\'est magique.\\n\\n:::info L\'astuce de ton dev sensei\\n\\nJe te conseille de faire un endpoint apr\xe8s l\'autre. C\'est plus simple pour tester et pour comprendre. Et du coup, un use case apr\xe8s l\'autre. Et n\'oublie d\'\xe9crire le code que je te pr\xe9sente, ne le copie-colle pas si tu veux commencer \xe0 le retenir.\\n\\n::: \\n\\n```java title=\\"SomethingController.java\\"\\npackage fr.nvh.begin.spring.bag;\\n\\nimport fr.nvh.begin.spring.bag.use.cases.SomethingCreateUseCase;\\nimport fr.nvh.begin.spring.bag.use.cases.SomethingDeleteUseCase;\\nimport fr.nvh.begin.spring.bag.use.cases.SomethingFindAllUseCase;\\nimport fr.nvh.begin.spring.bag.use.cases.SomethingFindByIdUseCase;\\nimport fr.nvh.begin.spring.bag.use.cases.SomethingUpdateUseCase;\\nimport lombok.RequiredArgsConstructor;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.http.HttpStatus;\\nimport org.springframework.web.bind.annotation.DeleteMapping;\\nimport org.springframework.web.bind.annotation.GetMapping;\\nimport org.springframework.web.bind.annotation.PathVariable;\\nimport org.springframework.web.bind.annotation.PostMapping;\\nimport org.springframework.web.bind.annotation.PutMapping;\\nimport org.springframework.web.bind.annotation.RequestBody;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.ResponseStatus;\\nimport org.springframework.web.bind.annotation.RestController;\\n\\nimport java.util.List;\\n\\n@Slf4j // Lombok : g\xe9n\xe8re automatiquement un logger\\n@RequiredArgsConstructor\\n// Lombok : g\xe9n\xe8re automatiquement un constructeur avec tous les champs en param\xe8tres. Cela permet d\'injecter les d\xe9pendances dans le contr\xf4leur.\\n@RestController // indique que cette classe est un bean Spring de type Controller\\n@RequestMapping(\\"/api/something\\")\\n// indique que toutes les m\xe9thodes de cette classe sont accessibles via l\'URL /api/something\\npublic class SomethingController {\\n    // tous les use cases dont nous avons besoin, un par action\\n    private final SomethingCreateUseCase somethingCreateUseCase;\\n    private final SomethingFindAllUseCase somethingFindAllUseCase;\\n    private final SomethingFindByIdUseCase somethingFindByIdUseCase;\\n    private final SomethingUpdateUseCase somethingUpdateUseCase;\\n    private final SomethingDeleteUseCase somethingDeleteUseCase;\\n  \\n    @ResponseStatus(HttpStatus.CREATED)\\n    @PostMapping\\n    public SomethingDto create(@RequestBody SomethingDto somethingDto) { // le param\xe8tre somethingDto est r\xe9cup\xe9r\xe9 dans le corps de la requ\xeate\\n        log.info(\\"POST /api/something {}\\", somethingDto); // log pour voir ce qui se passe dans la console\\n        return somethingCreateUseCase.create(somethingDto);\\n    }\\n  \\n    @ResponseStatus(HttpStatus.OK) // indique que la m\xe9thode retourne un code HTTP 200\\n    @GetMapping // indique que cette m\xe9thode est accessible via une requ\xeate HTTP GET\\n    public List<SomethingDto> findAll() {\\n        log.info(\\"GET /api/something\\"); // log pour voir ce qui se passe dans la console\\n        return somethingFindAllUseCase.findAll(); // appel du use case\\n    }\\n  \\n    @ResponseStatus(HttpStatus.OK)\\n    @GetMapping(\\"/{id}\\")\\n    public SomethingDto findById(@PathVariable Long id) { // le param\xe8tre id est r\xe9cup\xe9r\xe9 dans l\'URL\\n        log.info(\\"GET /api/something/{}\\", id); // log pour voir ce qui se passe dans la console\\n        return somethingFindByIdUseCase.findById(id);\\n    }\\n  \\n    @ResponseStatus(HttpStatus.OK)\\n    @PutMapping(\\"/{id}\\")\\n    public SomethingDto update(@PathVariable Long id, @RequestBody SomethingDto somethingDto) {\\n        log.info(\\"PUT /api/something/{} {}\\", id, somethingDto); // log pour voir ce qui se passe dans la console\\n        return somethingUpdateUseCase.update(id, somethingDto);\\n    }\\n  \\n    @ResponseStatus(HttpStatus.NO_CONTENT)\\n    @DeleteMapping(\\"/{id}\\")\\n    public void delete(@PathVariable Long id) {\\n        log.info(\\"DELETE /api/something/{}\\", id); // log pour voir ce qui se passe dans la console\\n        somethingDeleteUseCase.delete(id);\\n    }\\n}\\n```\\n\\nVoil\xe0 un controller tr\xe8s classique. Quand tu mets @RestController, Spring va s\'occuper de tout. Tu n\'as pas besoin de faire de `@ResponseBody` ou de `@RequestBody`. C\'est magique. Et par d\xe9faut il te renvoie une r\xe9ponse `HTTP 200`. Comme j\'ai voulu des r\xe9ponses diff\xe9rentes, j\'ai mis des `@ResponseStatus` partout, y compris pour les `HTTP 200`. C\'est une question de coh\xe9rence. \\n\\nSpring s\'occupe aussi de la d\xe9s\xe9rialisation et de la s\xe9rialisation des diff\xe9rents param\xe8tres. Tu as plusieurs annotations pour indiquer \xe0 Spring o\xf9 il doit lire la donn\xe9e\xa0: \\n- `@PathVariable` pour les param\xe8tres dans l\'URL.\\n- `@RequestParam` pour les param\xe8tres dans la requ\xeate\\n- `@RequestBody` pour les param\xe8tres dans le corps de la requ\xeate, par d\xe9faut en JSON.\\n\\nIl y en a d\'autres, mais celles-ci sont les plus courantes. \\n\\n:::note\\n\\nDans un autre article, je te montrerai comment passer des param\xe8tres pour, par exemple, trier ou paginer les r\xe9sultats, pour faire des recherches ou des filtres. \\n\\n:::\\n\\n:::note L\'astuce de ton dev sensei\\n\\nFais bien attention, j\'utilise un `@RequiredArgsConstructor` de Lombok. Cela me permet de ne pas \xe9crire de constructeur. Mais ce constructeur ne prend en compte que les champs `final`. C\'est une bonne pratique de mettre tous les champs en `final` pour \xe9viter les erreurs. Par contre, si tu ne mets pas tes champs en `final`, ils ne seront pas initialis\xe9s dans le constructeur.\\n\\n:::\\n\\n### \xc9crivons les Use Cases\\n\\nPassons \xe0 la partie m\xe9tier. J\'ai dit un `UseCase` par action. Ils vont \xeatre tr\xe8s simples\xa0: ils vont appeler le `Repository` et le `Mapper` si besoin. C\'est tout. \\n\\n#### 1. Le Use Case pour cr\xe9er une chose\\n\\n```java title=\\"SomethingCreateUseCase.java\\"\\npackage fr.nvh.begin.spring.bag.use.cases;\\n\\nimport fr.nvh.begin.spring.bag.SomethingDto;\\nimport fr.nvh.begin.spring.bag.SomethingEntity;\\nimport fr.nvh.begin.spring.bag.SomethingMapper;\\nimport fr.nvh.begin.spring.bag.SomethingRepository;\\nimport lombok.RequiredArgsConstructor;\\nimport org.springframework.stereotype.Component;\\n\\n@RequiredArgsConstructor\\n@Component\\npublic class SomethingCreateUseCase {\\n    private final SomethingRepository repository;\\n    private final SomethingMapper mapper;\\n\\n    public SomethingDto create(SomethingDto somethingDto) {\\n        SomethingEntity entity = mapper.toEntity(somethingDto);\\n        SomethingEntity saved = repository.save(entity);\\n        return mapper.toDto(saved);\\n    }\\n}\\n```\\n\\n#### 2. Le Use Case pour lire toutes les choses\\n\\n```java title=\\"SomethingFindAllUseCase.java\\"\\npackage fr.nvh.begin.spring.bag.use.cases;\\n\\nimport fr.nvh.begin.spring.bag.SomethingDto;\\nimport fr.nvh.begin.spring.bag.SomethingMapper;\\nimport fr.nvh.begin.spring.bag.SomethingRepository;\\nimport lombok.RequiredArgsConstructor;\\nimport org.springframework.stereotype.Component;\\n\\nimport java.util.List;\\n\\n@RequiredArgsConstructor\\n@Component\\npublic class SomethingFindAllUseCase {\\n\\n    private final SomethingRepository repository;\\n    private final SomethingMapper mapper;\\n\\n    public List<SomethingDto> findAll() {\\n        return repository.findAll().stream().map(mapper::toDto).toList();\\n    }\\n}\\n```\\n\\n#### 3. Le Use Case pour lire une chose\\n\\n```java title=\\"SomethingFindByIdUseCase.java\\"\\npackage fr.nvh.begin.spring.bag.use.cases;\\n\\nimport fr.nvh.begin.spring.bag.SomethingDto;\\nimport fr.nvh.begin.spring.bag.SomethingMapper;\\nimport fr.nvh.begin.spring.bag.SomethingRepository;\\nimport jakarta.persistence.EntityNotFoundException;\\nimport lombok.RequiredArgsConstructor;\\nimport org.springframework.stereotype.Component;\\n\\n@RequiredArgsConstructor\\n@Component\\npublic class SomethingFindByIdUseCase {\\n    private final SomethingRepository repository;\\n    private final SomethingMapper mapper;\\n\\n    public SomethingDto findById(Long id) {\\n        return repository.findById(id)\\n                .map(mapper::toDto)\\n                .orElseThrow(EntityNotFoundException::new);\\n    }\\n}\\n```\\n\\n#### 4. Le Use Case pour modifier une chose\\n\\n```java title=\\"SomethingUpdateUseCase.java\\"\\npackage fr.nvh.begin.spring.bag.use.cases;\\n\\nimport fr.nvh.begin.spring.bag.SomethingDto;\\nimport fr.nvh.begin.spring.bag.SomethingEntity;\\nimport fr.nvh.begin.spring.bag.SomethingMapper;\\nimport fr.nvh.begin.spring.bag.SomethingRepository;\\nimport lombok.RequiredArgsConstructor;\\nimport org.springframework.stereotype.Component;\\n\\n@RequiredArgsConstructor\\n@Component\\npublic class SomethingUpdateUseCase {\\n    private final SomethingRepository repository;\\n    private final SomethingMapper mapper;\\n\\n    public SomethingDto update(Long id, SomethingDto somethingDto) {\\n        somethingDto.setId(id);\\n        SomethingEntity entity = mapper.toEntity(somethingDto);\\n        SomethingEntity saved = repository.save(entity);\\n        return mapper.toDto(saved);\\n    }\\n}\\n```\\n\\n#### 5. Le Use Case pour supprimer une chose\\n\\n```java title=\\"SomethingDeleteUseCase.java\\"\\npackage fr.nvh.begin.spring.bag.use.cases;\\n\\nimport fr.nvh.begin.spring.bag.SomethingRepository;\\nimport lombok.RequiredArgsConstructor;\\nimport org.springframework.stereotype.Component;\\n\\n@RequiredArgsConstructor\\n@Component\\npublic class SomethingDeleteUseCase {\\n    private final SomethingRepository repository;\\n\\n    public void delete(Long id) {\\n        repository.deleteById(id);\\n    }\\n}\\n```\\n\\n### Testons notre application\\n\\n Tu peux utiliser [Postman](https://www.postman.com/) ou [Insomnia](https://insomnia.rest/) pour tester tes endpoints. Tu peux aussi utiliser [curl](https://curl.se/) ou [httpie](https://httpie.io/). Ou alors, tu peux utiliser un navigateur. C\'est plus simple pour les `GET`.\\n\\nJe te laisse tester tout \xe7a tout seul, car le billet est d\xe9j\xe0 assez long comme \xe7a. J\'\xe9crirai bient\xf4t un article afin de filtrer, de trier, de paginer et dans lequel je te montrerai aussi comment utiliser un logiciel d\xe9di\xe9 comme ceux mentionn\xe9s ci-dessus.\\n\\n## Pour aller plus loin\\n\\nVoici quelques liens pour approfondir les sujets abord\xe9s dans cet article en attendant le prochain article\xa0!\\n\\n- Wikipedia\xa0:\\n  - [Programmation Orient\xe9e Objet](https://fr.wikipedia.org/wiki/Programmation_orient%C3%A9e_objet),\\n  - [Les verbes, ou m\xe9thodes, HTTP](https://fr.wikipedia.org/wiki/Hypertext_Transfer_Protocol#M%C3%A9thodes)\\n  - [REST](https://fr.wikipedia.org/wiki/Representational_state_transfer)\\n  - [Data Transfer Object](https://fr.wikipedia.org/wiki/Objet_de_transfert_de_donn%C3%A9es)\\n  - [Endpoint](https://en.wikipedia.org/wiki/Endpoint_interface)\\n  - [La s\xe9rialisation](https://fr.wikipedia.org/wiki/S%C3%A9rialisation)\\n  - [Jackson](https://en.wikipedia.org/wiki/Jackson_(API))\\n- Les sites officiels\xa0:\\n  - [H2 Database](https://www.h2database.com/html/main.html)\\n  - [Lombok](https://projectlombok.org/)\\n  - [MapStruct](https://mapstruct.org/)\\n  - [Hibernate](https://hibernate.org/)\\n- Baeldung\xa0:\\n  - [REST with Spring Tutorial](https://www.baeldung.com/rest-with-spring-series)\\n  - [The Spring @Controller and @RestController Annotations](https://www.baeldung.com/spring-controller-vs-restcontroller)\\n  - [Spring @PathVariable Annotation](https://www.baeldung.com/spring-pathvariable)\\n    [Spring @RequestParam Annotation](https://www.baeldung.com/spring-request-param)\\n    [Spring @RequestMapping](https://www.baeldung.com/spring-requestmapping)\\n  - [Learn JPA & Hibernate](https://www.baeldung.com/learn-jpa-hibernate)\\n  - [Jackson](https://www.baeldung.com/jackson)\\n  - [Project Lombok](https://www.baeldung.com/intro-to-project-lombok)\\n\\n## Conclusion\\n\\nJe t\'ai expliqu\xe9 une architecture simple et efficace pour faire ton application Spring.\\n\\nJe t\'ai montr\xe9 du code avec beaucoup d\'annotations afin de te montrer que Spring s\'occupe de tout pour que tu puisses te concentrer sur ton code.\\n\\nJ\'esp\xe8re que tu as appris des choses. Et j\'esp\xe8re que tu as envie d\'en apprendre encore plus. Parce que c\'est pas fini. Et je te donne rendez-vous dans le prochain article pour voir comment on peut filtrer et paginer tout \xe7a. Ou l\'un des nombreux sujets \xe0 peine abord\xe9s dans cet article. Dis-moi ce que tu pr\xe9f\xe8res en commentaire\xa0!\\n\\nSi tu as envie que j\'explique plus en avant certains concepts ou que je parle de quelque chose en particulier, n\'h\xe9site pas \xe0 me le dire dans les commentaires.\\n\\nPour ne pas rater les prochains articles, abonne-toi \xe0 un flux (tu as le choix entre [RSS](https://nathaniel-vaur-henel.github.io/blog/rss.xml), [Atom](https://nathaniel-vaur-henel.github.io/blog/atom.xml) et [Json](https://nathaniel-vaur-henel.github.io/blog/feeed.json)) ou \xe0 la newsletter en [page d\'accueil](/)\xa0!\\n\\nEt bon entrainement\xa0!"},{"id":"/begin-spring","metadata":{"permalink":"/blog/begin-spring","source":"@site/blog/2024/2024-02-15.begin_spring.md","title":"D\xe9buter avec Spring gr\xe2ce \xe0 Spring Initializr","description":"Ce n\'est pas toujours facile de se lancer avec Spring quand on est un d\xe9veloppeur Java d\xe9butant. De premier abord aride avec sa r\xe9putation de mastodonte compliqu\xe9 \xe0 appr\xe9hender, Spring est pourtant un framework superstar dans la communaut\xe9 java, et ce n\'est pas sans raison.","date":"2024-02-15T00:00:00.000Z","tags":[{"inline":true,"label":"Java","permalink":"/blog/tags/java"},{"inline":true,"label":"Spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"langage","permalink":"/blog/tags/langage"},{"inline":true,"label":"d\xe9veloppement","permalink":"/blog/tags/developpement"},{"inline":true,"label":"tuto","permalink":"/blog/tags/tuto"}],"hasTruncateMarker":true,"authors":[{"name":"Nathaniel Vaur Henel","title":"Tech Lead, D\xe9veloppeur s\xe9nior, formateur et cr\xe9ateur de contenu","description":"Fort de deux d\xe9cennies de d\xe9veloppement, j\'ai acquis une expertise technique en d\xe9veloppement back-end Java associ\xe9 au framework Spring. Avec le temps, j\'ai d\xe9velopp\xe9 une approche \\"artisanale\\" du code, avec la volont\xe9 de maitriser toute la chaine de comp\xe9tences, du recueil du besoin \xe0 la maintenance, avec un souci d\'efficacit\xe9 et de qualit\xe9.","page":{"permalink":"/blog/authors/nathaniel-vaur-henel"},"socials":{"dev sensei":"https://nathaniel-vaur-henel.github.io/crafters/nathaniel-vaur-henel","linkedin":"https://www.linkedin.com/in/nathaniel-vaur-henel/","github":"https://github.com/nathaniel-vaur-henel","malt":"https://www.malt.fr/profile/nathanielvaurhenel"},"imageURL":"https://github.com/Nathaniel-Vaur-Henel.png","key":"nvh"}],"frontMatter":{"slug":"/begin-spring","title":"D\xe9buter avec Spring gr\xe2ce \xe0 Spring Initializr","authors":"nvh","tags":["Java","Spring","langage","d\xe9veloppement","tuto"],"enableComments":true},"unlisted":false,"prevItem":{"title":"D\xe9velopper son premier projet Spring : poser de bonnes bases","permalink":"/blog/continue-spring"}},"content":"Ce n\'est pas toujours facile de se lancer avec Spring quand on est un d\xe9veloppeur Java d\xe9butant. De premier abord aride avec sa r\xe9putation de mastodonte compliqu\xe9 \xe0 appr\xe9hender, Spring est pourtant un framework superstar dans la communaut\xe9 java, et ce n\'est pas sans raison.  \\nAfin de faciliter ta prise en main de Spring, je vais te pr\xe9senter comment il fonctionne et te donner les clefs qui te permettront de te lancer tout en douceur.\\n\\n\x3c!--truncate--\x3e\\n\\n\\n:::warning\\n\\nJe vais consid\xe9rer que tu as d\xe9j\xe0 des bases en Java. Si ce n\'est pas le cas, je te conseille de commencer par l\xe0. Tu trouveras plein de ressources sur le net pour apprendre Java. J\'ai toujours aim\xe9 les cours d\'[OpenClassrooms](https://openclassrooms.com/fr/courses/6173501-apprenez-a-programmer-en-java), mais il y en a plein d\'autres. Et tu pourras trouver quelques conseils sur ce site.\\n\\n:::\\n\\n## Spring, un framework Java incontournable\\n\\nSpring, c\'est de la magie\xa0: ce framework sait faire plein de choses tout seul, sans que l\'on ait besoin de comprendre toutes les m\xe9caniques sous-jacentes. Un avantage certes, mais qui peut rendre parfois son usage d\xe9routant, voire complexe, quand le framework s\'emballe et te casse ta belle appli sans que tu ne comprennes pourquoi. [En mode les balais de Fantasia qui se mettent \xe0 danser tout seul... et inondent finalement ta baraque](https://youtu.be/snB8u_G3jVI?feature=shared&t=374).\\n\\n### Spring, le framework pour tous\\n\\nSpring est un framework opensource Java qui permet de d\xe9velopper plus rapidement des applications complexes et de qualit\xe9. Il est tr\xe8s populaire et tr\xe8s utilis\xe9 dans le monde professionnel au point o\xf9 l\'on peut dire qu\'on ne code plus en Java, mais en Spring. C\'est une v\xe9ritable comp\xe9tence clef qui peut ouvrir les portes de beaux projets, mais surtout en fermer si on ne le ma\xeetrise pas suffisamment.\\n\\nDerni\xe8rement, j\'ai abord\xe9 le sujet de Spring avec des d\xe9veloppeurs juniors que j\'accompagne. Comme ils sortent d\'\xe9cole et n\'ont pas creus\xe9 la question de ce framework, je leur ai propos\xe9, afin d\'augmenter leurs comp\xe9tences, de cr\xe9er un projet perso en Spring. Leur r\xe9action a \xe9t\xe9 unanime\xa0:  \\n\\"C\'est trop gros, trop compliqu\xe9, c\'est pour des grosses applis.\\"  \\nAlors... c\'est pas faux. Je me souviens moi-m\xeame avoir eu des difficult\xe9s \xe0 m\'y mettre lorsque je n\'\xe9tais encore qu\'un d\xe9butant.\\nEt pourtant, aujourd\'hui, je ne peux plus m\'en passer. Spring est devenu un outil indispensable dans mon quotidien de d\xe9veloppeur Java.  \\n\\nJe te propose de d\xe9mystifier Spring et de te montrer comment tu peux t\'en servir pour cr\xe9er des applications, quelles que soient la taille et l\'ambition de ton projet.\\n\\nUne fois les concepts de base assimil\xe9s, Spring est finalement facile \xe0 utiliser, \xe0 condition d\'y aller doucement et d\'avoir d\xe9j\xe0 quelques bases en Java. Donc go, go, go\xa0! M\xeame \xe0 la maison, tu peux springer\xa9 (il faut que je le d\xe9pose \xe7a...) \xe0 volont\xe9.\\n\\n### Attention \xe0 ne pas confondre Spring ou Spring Boot\\n\\n**Spring** est un framework tr\xe8s modulaire. Il est compos\xe9 de plusieurs modules, qui peuvent \xeatre utilis\xe9s ind\xe9pendamment les uns des autres. \\n\\n**Spring Boot** est un module de Spring qui permet de cr\xe9er et de configurer plus facilement des applications Spring. Il contient aussi un serveur d\'application embarqu\xe9 et des outils pour faciliter le d\xe9veloppement (rechargement \xe0 chaud, gestion des d\xe9pendances, etc).\\n\\nDonc, tu peux faire du Spring sans Spring Boot, mais tu ne peux pas faire du Spring Boot sans Spring. En fait, Spring Boot est une surcouche de Spring qui te permet de te concentrer sur le d\xe9veloppement de ton application sans te soucier de la configuration de Spring. C\'est pour \xe7a que je te conseille de commencer par Spring Boot si tu d\xe9butes avec Spring. Tu verras, c\'est plus simple et plus rapide.\\n\\n:::info Le moment mn\xe9motechnique\\n\\nSpring est comme un dojo traditionnel d\'arts martiaux, offrant une profondeur d\'apprentissage et de pratique. En revanche, Spring Boot est comme un entra\xeenement en plein air, ax\xe9 sur la simplicit\xe9 et l\'efficacit\xe9 pour une progression rapide.\\n\\n:::\\n\\n### Spring, c\'est quoi\xa0?\\n\\nSpring est un sac de grain de caf\xe9... Attends, je t\'explique...\\n(Roulement de tambours pour le moment culture g\xe9n\xe9rale.)\\nSi tu ne le sais pas, **java** est un mot anglais pour caf\xe9. C\'est pour \xe7a que le logo de Java (note la majuscule) est une tasse de caf\xe9 fumante _(AAAAHHHH\xa0!!!)_ et qu\'en Java, on a des **Beans**, des haricots ou des grains de caf\xe9 _(OOOHHHH\xa0!!!)_. \\nEt comme Spring est un conteneur de Beans, on peut dire que c\'est un sac de grain de caf\xe9.\\n\\nGarde cette image en t\xeate, \xe7a devrait te permettre de mieux comprendre la suite.\\n\\nEn fait, c\'est m\xeame encore mieux\xa0:  \\n- Tu d\xe9cris tes Beans \xe0 Spring.\\n- Il te les fabrique.\\n- Il te les range sur une \xe9tag\xe8re, pr\xeats \xe0 servir.\\n\\nSpring initialise tes Beans, les range dans un conteneur, et te les fournit quand tu en as besoin. Et il fait \xe7a tout seul. Et \xe7a, c\'est le premier gros point fort de Spring et \xe7a s\'appelle l\'inversion de contr\xf4le (ou IoC pour les intimes). C\'est le premier concept cl\xe9s de Spring.\\n\\nLe deuxi\xe8me concept clef de Spring, c\'est qu\'il utilise la POO (Programmation Orient\xe9e Objet) comme un \xe9l\xe9ment central. \xc0 un point qui d\xe9fie l\'imagination d\'un d\xe9butant. Je ferai peut-\xeatre un article \xe0 ce sujet. Spring utilise la POO pour faire des trucs tout seul, comme g\xe9n\xe9rer des classes enti\xe8res \xe0 partir d\'une simple annotation.\\n\\nEn parlant annotations, c\'est le c\u0153ur de Spring. Tu vas voir, c\'est super pratique. Tu \xe9cris une annotation au-dessus d\'une classe ou d\'une m\xe9thode, et Spring fait le reste. C\'est magique. Litt\xe9ralement. Avec Spring, quand on me demande \\"comment on fait \xe7a\xa0?\\", j\'aime r\xe9pondre\xa0:\\n> Il a une annotation pour \xe7a.\\n\\nBref, l\'abstraction de Spring est tellement puissante que tu n\'as pas besoin de comprendre comment \xe7a marche pour l\'utiliser. Mais c\'est quand m\xeame mieux si tu comprends quand-m\xeame. C\'est le troisi\xe8me concept clef de Spring.\\n\\n:::info Le moment mn\xe9motechnique\\n\\nSpring, c\'est un sac de grain de caf\xe9, avec un robot qui te les pr\xe9pare et te les sert quand tu en as besoin. Et la t\xe9l\xe9commande du robot, ce sont les annotations.\\n\\n:::\\n\\nSpring est compos\xe9 de plusieurs modules, une vingtaine, mais pour d\xe9buter, je te conseille de commencer par l\xe0\xa0:\\n\\n- **Spring Boot**\xa0: c\'est le module qui permet de cr\xe9er des applications Spring autonomes. Il contient aussi un serveur d\'application embarqu\xe9 (Tomcat, Jetty ou Undertow), et des outils pour faciliter le d\xe9veloppement (rechargement \xe0 chaud, etc).\\n- **Spring Data**\xa0: c\'est le module qui permet de manipuler des donn\xe9es dans des bases de donn\xe9es relationnelles ou NoSQL.\\n- **Spring Web Services**\xa0: c\'est le module qui permet de d\xe9velopper des applications web services.\\n- **Spring Test**\xa0: c\'est le module qui permet de faire des tests unitaires et d\'int\xe9gration.\\n\\n:::note\\n\\nSi tu veux te lancer dans la d\xe9couverte des autres modules, je te conseille tout simplement la (sacro-sainte) [doc](https://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/html/overview.html)\\n\\n:::\\n\\n:::warning Attention aux Chocabugs\xa0!\\n\\n> Spring a un grand pouvoir et un grand pouvoir implique de grandes responsabilit\xe9s.\\n\\nSpring, c\'est de la magie. Il fait des trucs tout seul et tu ne vas pas toujours comprendre comment il fait. Et c\'est \xe0 ce moment que tu dois creuser un peu afin de comprendre les m\xe9canismes sous-jacents. Pourquoi\xa0? Parce que sinon, tu vas te retrouver avec des bugs incompr\xe9hensibles. Et \xe7a, c\'est pas cool. Surtout si tu rajoutes Hibernate et Lombok, et d\'autres encore, qui sont aussi des frameworks qui font des trucs tout seul. \xc0 coup d\'annotations. Et qui sont int\xe9gr\xe9s \xe0 Spring Boot.\\n\\nEt paf, \xe7a fait des Chocabugs\xa9.\\n\\n:::\\n\\n## Initializr\xa0: le g\xe9n\xe9rateur de projet Spring\\n\\n[Spring Initializr](https://start.spring.io/) est l\'outil de r\xe9f\xe9rence pour utiliser Spring Boot et pour cause, c\'est l\'outil officiel de Spring pour cr\xe9er des projets Spring Boot. C\'est un site qui te permet de cr\xe9er un projet Spring Boot en quelques clics. \\nC\'est tr\xe8s pratique pour commencer. Tu choisis les d\xe9pendances dont tu as besoin, et il te g\xe9n\xe8re un projet pr\xeat \xe0 l\'emploi.\\n\\nNous allons donc cr\xe9er un projet Spring Boot avec Spring Initializr. \\n\\n### Avant de commencer, pr\xe9sentation des d\xe9pendances\\n\\nAvant de nous lancer dans le vif du sujet, je te pr\xe9sente quelques d\xe9pendances de bases, je les mets dans tous mes projets ou presque\xa0:\\n\\n- **Spring Web**\xa0: c\'est la d\xe9pendance qui permet de d\xe9velopper des applications web.\\n- **Spring Data JPA**\xa0: c\'est la d\xe9pendance qui permet de manipuler des donn\xe9es dans une base de donn\xe9es relationnelle.\\n- **Spring Boot Test**\xa0: c\'est la d\xe9pendance qui permet de faire des tests unitaires et d\'int\xe9gration. Tu n\'as rien \xe0 faire, Spring Initializr ajoute d\xe9j\xe0 cette d\xe9pendance.\\n- **Lombok**\xa0: c\'est la d\xe9pendance qui permet de g\xe9n\xe9rer du code automatiquement. C\'est tr\xe8s pratique pour \xe9viter de r\xe9p\xe9ter du code.\\n- **Spring Boot DevTools**\xa0: c\'est la d\xe9pendance qui permet de recharger \xe0 chaud ton application. C\'est tr\xe8s pratique pour gagner du temps.\\n\\nLibre \xe0 toi d\'en choisir d\'autres. Tu peux m\xeame en ajouter d\'autres plus tard. C\'est \xe7a qui est bien avec Spring\xa0: tu peux commencer petit et ajouter des choses au fur et \xe0 mesure que ton projet grandit.\\n\\nPetit bonus\xa0: Si tu veux une base de donn\xe9es facile et rapide \xe0 mettre en place, tu peux ajouter la d\xe9pendance **H2 Database**. C\'est une base de donn\xe9es relationnelle en m\xe9moire. C\'est tr\xe8s pratique pour le d\xe9marrage d\'une appli. Et tu peux aussi la mettre en fichier pour conserver les donn\xe9es entre deux lancements de l\'appli. Et quand tu passeras en production, tu pourras facilement changer pour une autre base de donn\xe9es. H2 m\xe9riterait un article \xe0 lui tout seul, mais pour l\'instant, je te conseille de l\'ajouter.\\n\\n### Cr\xe9er son premier projet avec Spring Initializr \xe9tape par \xe9tape\\n\\nC\'est enfin l\'heure du tuto\xa0!\\n\\nC\'est le moment d\'aller sur [Spring Initializr](https://start.spring.io/) pour cr\xe9er ton projet.\\nPour ce faire, tu dois d\'abord remplir les champs suivants\xa0:\\n\\n- **Project**\xa0: c\'est le type de projet. Tu peux choisir Maven ou Gradle. Moi, j\'ai l\'habitude de Maven, donc je choisis `Maven`.\\n- **Language**\xa0: c\'est le langage de programmation. Tu peux choisir Java, Kotlin ou Groovy. Moi, je choisis `Java`.\\n- **Spring Boot**\xa0: c\'est la version de Spring Boot. Tu peux choisir la derni\xe8re version stable. Moi, je choisis la version `3.2.2`.\\n- **Project Metadata**\xa0: ce sont les informations sur ton projet. Tu peux mettre ce que tu veux. Moi, je mets\xa0:\\n  - **Group**\xa0: `fr.nvh`, c\'est le nom racine de tous mes packages de toutes mes side projects.\\n  - **Artifact**\xa0: `begin-spring`, c\'est le nom de code du projet.\\n  - **Name**\xa0: `D\xe9bute avec Spring`, c\'est le nom du projet.\\n  - **Description**\xa0: `Un side project pour d\xe9buter avec Spring`, c\'est la description du projet.\\n  - **Package name**\xa0: `fr.nvh.begin.spring`, c\'est le nom du package racine du projet.\\n  - **Packaging**\xa0: `jar`, c\'est le type de package g\xe9n\xe9r\xe9, tant que tu ne passes pas en production, \xe7a n\'a pas d\'importance.\\n  - **Java**\xa0: 21, c\'est la version de Java, tu peux mettre la derni\xe8re version stable.\\n\\nEt voil\xe0\xa0:\\n![spring_initializer_basics.png](begin_spring/spring_initializer_basics.png)\\n\\n:::info\\n\\nTu pourras changer toutes ces infos plus tard dans ton fichier de configuration `pom.xml` ou `build.gradle`.\\n\\n::: \\n\\nVoil\xe0 pour le travail de base.  \\nMaintenant, il faut ajouter les d\xe9pendances.  \\nPour cela, tu cliques sur le bouton **Add Dependencies** et tu ajoutes les d\xe9pendances dont je t\'ai parl\xe9 plus haut. Tu peux aussi ajouter d\'autres d\xe9pendances si tu veux.\\n\\nPour rappel\xa0:\\n\\n- **Spring Web**\xa0: c\'est la d\xe9pendance qui permet de d\xe9velopper des applications web.\\n- **Spring Data JPA**\xa0: c\'est la d\xe9pendance qui permet de manipuler des donn\xe9es dans une base de donn\xe9es relationnelle.\\n- **Spring Boot Test**\xa0: c\'est la d\xe9pendance qui permet de faire des tests unitaires et d\'int\xe9gration.\\n- **Lombok**\xa0: c\'est la d\xe9pendance qui permet de g\xe9n\xe9rer du code automatiquement. C\'est tr\xe8s pratique pour \xe9viter de r\xe9p\xe9ter du code.\\n- **Spring Boot DevTools**\xa0: c\'est la d\xe9pendance qui permet de recharger \xe0 chaud ton application. C\'est tr\xe8s pratique pour gagner du temps.\\n- **H2 Database**\xa0: c\'est la d\xe9pendance qui permet d\'ajouter une base de donn\xe9es relationnelle en m\xe9moire.\\n\\n![spring_initializer_dependencies.png](begin_spring/spring_initializer_dependencies.png)\\n\\nClic sur le bouton **Generate** et tu auras un fichier zip avec ton projet Spring Boot. D\xe9compresse-le et ouvre-le dans ton IDE pr\xe9f\xe9r\xe9.\\n\\nFaisons-le\xa0!\\n\\nComme je suis sympa, je te mets le lien vers le projet que j\'ai cr\xe9\xe9\xa0: [Spring Initializr - begin-spring](https://start.spring.io/#!type=maven-project&language=java&platformVersion=3.2.2&packaging=jar&jvmVersion=21&groupId=fr.nvh&artifactId=begin-spring&name=D%C3%A9bute%20avec%20Spring&description=Cr%C3%A9e%20un%20projet%20facilement&packageName=fr.nvh.begin.spring&dependencies=devtools,lombok,web,data-jpa,h2)\\n\\n:::info\\n\\nLe bouton **Explore** te permet de voir le projet que tu as cr\xe9\xe9 avant de la t\xe9l\xe9charger. \\n\\n:::\\n\\n### Lancement de l\'application du projet g\xe9n\xe9r\xe9\\n\\nOuvre ton projet dans ton IDE pr\xe9f\xe9r\xe9. \\n\\n:::info\\n\\nMoi, j\'utilise [IntelliJ IDEA](https://www.jetbrains.com/fr-fr/idea/), mais tu peux utiliser celui que tu veux. La version Community d\'IntelliJ IDEA est gratuite et suffisante pour commencer. Je pourrais \xe9crire des tonnes d\'articles sur IntelliJ IDEA, et je le ferai prochainement, mais pour l\'instant, revenons \xe0 Spring.\\n\\n:::\\n\\nAlors \xe0 quoi \xe7a ressemble\xa0? \\n- Un fichier de configuration `pom.xml` (ou `build.gradle`).\\n- Un fichier `DebuteAvecSpringApplication.java` dans le package `fr.nvh.begin.spring`. C\'est la classe de d\xe9marrage de ton application. \\n- Un fichier `application.properties` dans le dossier `src/main/resources`. C\'est le fichier de configuration de ton application. \\n- Un fichier `DebuteAvecSpringApplication.java` dans le package `fr.nvh.begin.spring`. C\'est le fichier de test de ton application.\\n- Un fichier `HELP.md` qui contient des informations et des guides sur Spring.\\n\\nIgnore le reste pour l\'instant.\\n\\nBon, commen\xe7ons par le commencement. Le fichier `pom.xml` (ou `build.gradle`). Va jeter un \u0153il, tu y verras toutes les d\xe9pendances que tu as ajout\xe9es. Tu pourras aussi y ajouter d\'autres d\xe9pendances plus tard.\\n\\nEt tu peux d\xe9j\xe0 lancer ton application\xa0! Tu verras, \xe7a ne fait pas grand-chose pour l\'instant. Mais c\'est d\xe9j\xe0 un bon d\xe9but.\\n\\nRegardons un peu ces logs. Tu verras, c\'est tr\xe8s verbeux. Mais c\'est normal. C\'est Spring qui te dit tout ce qu\'il fait. Et c\'est tr\xe8s pratique pour comprendre ce qui se passe. Int\xe9ressons-nous \xe0 quelque lignes en particulier\xa0:\\n\\n- Un petit d\'ASCII art qui te dit que c\'est Spring Boot qui d\xe9marre.\\n  ```\\n    .   ____          _            __ _ _\\n   /\\\\\\\\ / ___\'_ __ _ _(_)_ __  __ _ \\\\ \\\\ \\\\ \\\\\\n  ( ( )\\\\___ | \'_ | \'_| | \'_ \\\\/ _` | \\\\ \\\\ \\\\ \\\\\\n   \\\\\\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\\n    \'  |____| .__|_| |_|_| |_\\\\__, | / / / /\\n   =========|_|==============|___/=/_/_/_/\\n   :: Spring Boot ::                (v3.2.2)\\n  ```\\n- Si tu as mis **Spring Boot Devtools**, tu verras une ligne qui te dit que le rechargement \xe0 chaud est activ\xe9\xa0: `LiveReload server is running on port 35729`\\n- Tu verras aussi deux lignes qui te disent que la base de donn\xe9es est d\xe9marr\xe9e. \\n  - `HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:006fa2a9-f721-437e-ad84-dfc02dc70c38 user=SA` pour la connection \xe0 la base de donn\xe9es.\\n  - `H2 console available at \'/h2-console\'. Database available at \'jdbc:h2:mem:3e3e3e3e-3e3e-3e3e-3e3e-3e3e3e3e3e3e\'` pour t\'annoncer que tu peux acc\xe9der \xe0 la base de donn\xe9es \xe0 l\'adresse http://localhost:8080/h2-console. Moi, j\'adore.\\n- Tu verras aussi une ligne qui te dit que le serveur d\'application est d\xe9marr\xe9.\\n  `Tomcat started on port(s): 8080 (http) with context path \'\'`\\n- Et tu verras une ligne qui te dit que l\'application est d\xe9marr\xe9e.\\n  `Started DebuteAvecSpringApplication in 1.5 seconds (JVM running for 2.1)`\\n- Tu verras aussi des lignes qui te disent qu\'Hibernate est lanc\xe9.\\n\\nDu coup, va voir ta base de donn\xe9es\xa0! Tu peux y acc\xe9der \xe0 l\'adresse http://localhost:8080/h2-console, remplis le champ `JDBC URL:` avec l\'url que tu trouves dans les logs, ici `jdbc:h2:mem:006fa2a9-f721-437e-ad84-dfc02dc70c38`. Tu verras que tu as une base de donn\xe9es H2 qui est d\xe9marr\xe9e. Bon, elle est vide, mais c\'est d\xe9j\xe0 un bon d\xe9but.\\n\\nEt tu peux aussi acc\xe9der \xe0 ton application \xe0 l\'adresse http://localhost:8080. Tu verras une belle page d\'erreur. C\'est normal, tu n\'as pas encore de page \xe0 afficher. \\n\\nEt voil\xe0, tu as d\xe9j\xe0 une application Spring qui tourne. Tu peux d\xe9j\xe0 commencer \xe0 coder. On y va\xa0? \\n\\nOk, mais pas maintenant, je vais m\'arr\xeater l\xe0 pour aujourd\'hui. Je te laisse dig\xe9rer tout \xe7a. Et je te donne rendez-vous dans le prochain article pour commencer \xe0 coder et \xe0 configurer ton application.\\n\\n## Pour aller plus loin\\n\\nVoici quelques liens pour approfondir les sujets abord\xe9s dans cet article en attendant le prochain article\xa0!\\n\\n- Wikipedia\xa0:\\n  - [Java](https://fr.wikipedia.org/wiki/Java_(langage))\\n  - [Kotlin](https://fr.wikipedia.org/wiki/Kotlin_(langage))\\n  - [Groovy](https://fr.wikipedia.org/wiki/Groovy_(langage))\\n  - [Maven](https://fr.wikipedia.org/wiki/Apache_Maven)\\n  - [Gradle](https://fr.wikipedia.org/wiki/Gradle)\\n  - [Spring](https://fr.wikipedia.org/wiki/Spring_Framework)\\n  - [H2 Database](https://fr.wikipedia.org/wiki/H2_(base_de_donn%C3%A9es))\\n- Spring\xa0:\\n  - [Spring](https://spring.io/)\\n  - [Spring Initializr](https://start.spring.io/)\\n  - [Spring Boot](https://spring.io/projects/spring-boot)\\n  - [Spring Data JPA](https://spring.io/projects/spring-data-jpa)\\n  - [Spring Web Services](https://spring.io/guides/gs/producing-web-service/)\\n  - [Spring Boot Test](https://spring.io/guides/gs/testing-web/)\\n  - [Spring Boot DevTools](https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-devtools)\\n  - [Spring Security](https://spring.io/projects/spring-security)\\n- Les sites officiels\xa0:\\n  - [H2 Database](https://www.h2database.com/html/main.html)\\n  - [Lombok](https://projectlombok.org/)\\n  - [Hibernate](https://hibernate.org/)\\n  - [Gradle](https://gradle.org/)\\n  - [Maven](https://maven.apache.org/)\\n  - [Java](https://www.java.com/fr/)\\n  - [Kotlin](https://kotlinlang.org/)\\n  - [Groovy](https://groovy-lang.org/)\\n  - [Cours en ligne OpenClassrooms](https://openclassrooms.com/fr)\\n  - [IntelliJ IDEA](https://www.jetbrains.com/fr-fr/idea/)\\n- Baeldung\xa0:\\n  - [Spring](https://www.baeldung.com/spring-tutorial)\\n  - [Spring Boot](https://www.baeldung.com/spring-boot)\\n  - [A Comparison Between Spring and Spring Boot](https://www.baeldung.com/spring-vs-spring-boot)\\n  - [Spring Data JPA](https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa)\\n  - [Spring Web Services](https://www.baeldung.com/spring-webserviceservertest)\\n  - [Spring Boot Test](https://www.baeldung.com/spring-boot-testing)\\n  - [Spring Boot DevTools](https://www.baeldung.com/spring-boot-devtools)\\n\\n## Conclusion\\n\\nJe t\'ai expliqu\xe9 ce qu\'est Spring et pourquoi c\'est un framework incontournable pour un d\xe9veloppeur Java.\\n\\nJe t\'ai expliqu\xe9 comment cr\xe9er une application Spring en quelques minutes gr\xe2ce \xe0 [Spring Initializr](https://start.spring.io/) et je t\'ai m\xeame donn\xe9 des d\xe9pendances pour commencer.\\n\\nJ\'esp\xe8re que tu as appris des choses. Et j\'esp\xe8re que tu as envie d\'en apprendre encore plus. Parce que c\'est pas fini. Et je te donne rendez-vous dans le [prochain article](2024-03-01.continue_spring.md) pour commencer \xe0 coder et \xe0 configurer ton application.\\n\\nSi tu as envie que j\'explique plus en avant certains concepts ou que je parle de quelque chose en particulier, n\'h\xe9site pas \xe0 me le dire dans les commentaires.\\n\\nPour ne pas rater les prochains articles, abonne-toi \xe0 un flux (tu as le choix entre [RSS](https://nathaniel-vaur-henel.github.io/blog/rss.xml), [Atom](https://nathaniel-vaur-henel.github.io/blog/atom.xml) et [Json](https://nathaniel-vaur-henel.github.io/blog/feeed.json)) ou \xe0 la newsletter en [page d\'accueil](/)\xa0!\\n\\nEt bon entrainement\xa0!"}]}}')}}]);