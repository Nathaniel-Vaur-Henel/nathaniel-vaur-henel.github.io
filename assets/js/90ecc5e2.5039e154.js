"use strict";(self.webpackChunknathaniel_vaur_henel_github_io=self.webpackChunknathaniel_vaur_henel_github_io||[]).push([[1153],{934:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var i=t(7192),s=t(4848),r=t(8453);const o={slug:"/continue-spring",title:"D\xe9velopper son premier projet Spring : poser de bonnes bases",authors:"nvh",tags:["Java","Spring","langage","d\xe9veloppement","tuto"],enableComments:!0},a=void 0,l={authorsImageUrls:[void 0]},p=[{value:"Concevoir un premier projet Spring avec Spring Initializr",id:"concevoir-un-premier-projet-spring-avec-spring-initializr",level:2},{value:"L&#39;application",id:"lapplication",level:3},{value:"L&#39;architecture",id:"larchitecture",level:3},{value:"Le processus d&#39;une action initialis\xe9e par le client",id:"le-processus-dune-action-initialis\xe9e-par-le-client",level:3},{value:"Les d\xe9pendances",id:"les-d\xe9pendances",level:3},{value:"\xc9crivons notre projet Spring\xa0!",id:"\xe9crivons-notre-projet-spring",level:2},{value:"\xc9crivons l&#39;Entity",id:"\xe9crivons-lentity",level:3},{value:"\xc9crivons le Repository",id:"\xe9crivons-le-repository",level:3},{value:"Testons notre entit\xe9 et son repository",id:"testons-notre-entit\xe9-et-son-repository",level:3},{value:"\xc9crivons le DTO",id:"\xe9crivons-le-dto",level:3},{value:"\xc9crivons le Mapper",id:"\xe9crivons-le-mapper",level:3},{value:"\xc9crivons le Controller",id:"\xe9crivons-le-controller",level:3},{value:"\xc9crivons les Use Cases",id:"\xe9crivons-les-use-cases",level:3},{value:"1. Le Use Case pour cr\xe9er une chose",id:"1-le-use-case-pour-cr\xe9er-une-chose",level:4},{value:"2. Le Use Case pour lire toutes les choses",id:"2-le-use-case-pour-lire-toutes-les-choses",level:4},{value:"3. Le Use Case pour lire une chose",id:"3-le-use-case-pour-lire-une-chose",level:4},{value:"4. Le Use Case pour modifier une chose",id:"4-le-use-case-pour-modifier-une-chose",level:4},{value:"5. Le Use Case pour supprimer une chose",id:"5-le-use-case-pour-supprimer-une-chose",level:4},{value:"Testons notre application",id:"testons-notre-application",level:3},{value:"Pour aller plus loin",id:"pour-aller-plus-loin",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",del:"del",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Que l'on soit un d\xe9veloppeur Java d\xe9butant ou non, il est n\xe9cessaire de consulter un tutoriel complet avant de lancer son premier projet Spring. En effet, ce framework peut \xeatre difficile \xe0 prendre en main. Une bonne technique d'approche est n\xe9cessaire pour ne pas se perdre dans son apprentissage. La plupart des tutoriels que j'ai vus jusqu'ici m'ont sembl\xe9 trop compliqu\xe9s pour \xeatre utilis\xe9s sur un premier projet. Cet article propose de cr\xe9er un projet Spring simple qui permet d'assimiler les bases sans s'encombrer de la complexit\xe9 du framework."}),"\n",(0,s.jsx)(n.h2,{id:"concevoir-un-premier-projet-spring-avec-spring-initializr",children:"Concevoir un premier projet Spring avec Spring Initializr"}),"\n",(0,s.jsxs)(n.p,{children:["Dans ",(0,s.jsx)(n.a,{href:"/blog/begin-spring",children:"l'article pr\xe9c\xe9dent"}),", je t'ai expliqu\xe9 comment cr\xe9er un projet Spring avec Spring Initializr. Il s'agit selon moi du moyen le plus efficace de se lancer avec Spring. Cet article \xe9tant la suite directe, je t'en recommande la lecture si ce n'est d\xe9j\xe0 fait."]}),"\n",(0,s.jsx)(n.p,{children:"Le but maintenant est de se familiariser avec les annotations de base de Spring. Pour ce faire, je te propose de cr\xe9er sur un petit sac fourre-tout afin de te familiariser avec les fonctionnalit\xe9s de base.\nReprends le projet cr\xe9\xe9 pour l'article pr\xe9c\xe9dent, et compl\xe9tons-le ensemble."}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["Comme pr\xe9c\xe9demment, je vais consid\xe9rer que tu as d\xe9j\xe0 des bases en Java. Si ce n'est pas le cas, je te conseille de commencer par l\xe0. Tu trouveras plein de ressources sur le net pour apprendre Java. J'ai toujours aim\xe9 les cours d'",(0,s.jsx)(n.a,{href:"https://openclassrooms.com/fr/courses/6173501-apprenez-a-programmer-en-java",children:"OpenClassrooms"}),", mais il y en a plein d'autres. Et tu pourras trouver quelques conseils sur ce site."]})}),"\n",(0,s.jsxs)(n.p,{children:["Nous allons cr\xe9er un sac ",(0,s.jsx)(n.del,{children:"de grain de caf\xe9"})," fourre-tout. Le but\xa0: faire une liste d'objets (ou de ce qu'on veut, c'est un sac super magique).",(0,s.jsx)(n.br,{}),"\n","Nous allons donc cr\xe9er de quoi\xa0:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Ajouter des choses."}),"\n",(0,s.jsx)(n.li,{children:"Lister les choses."}),"\n",(0,s.jsx)(n.li,{children:"Lire une chose."}),"\n",(0,s.jsx)(n.li,{children:"Modifier une chose."}),"\n",(0,s.jsx)(n.li,{children:"Supprimer une chose."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Et c'est d\xe9j\xe0 pas mal."}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Il y a plusieurs techniques, plusieurs \xe9coles, plusieurs mani\xe8res de faire. Je vais t'en montrer une. Elle est simple et efficace, mais tu pourras trouver d'autres mani\xe8res de faire. Le but, c'est de te montrer les bases, et apr\xe8s, tu pourras faire comme tu veux. Ou comme tu dois."})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Je ferai certainement des ",(0,s.jsx)(n.a,{href:"/devento",children:"Devento"})," pour expliquer tout ce que je vais te pr\xe9senter, mais pour l'instant, je te conseille de lire les liens que je t'ai mis. Et tu peux aussi faire des recherches dans ton moteur de recherche pr\xe9f\xe9r\xe9. Et sur les sites de r\xe9f\xe9rence que j'ai mis dans le pied de page du site\xa0!"]})}),"\n",(0,s.jsx)(n.h3,{id:"lapplication",children:"L'application"}),"\n",(0,s.jsxs)(n.p,{children:["Nous allons faire une application serveur en ",(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/Representational_state_transfer",children:"REST"}),"\xa0: nous allons d\xe9finir des ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Endpoint_interface",children:"endpoints"})," pour faire des actions sur notre sac."]}),"\n",(0,s.jsxs)(n.p,{children:["Les ",(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/Hypertext_Transfer_Protocol#M%C3%A9thodes",children:"verbes, ou m\xe9thodes, HTTP"})," que nous allons utiliser sont\xa0:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"GET"})," pour lire des donn\xe9es."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"POST"})," pour cr\xe9er des donn\xe9es."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"PUT"})," pour modifier des donn\xe9es."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DELETE"})," pour supprimer des donn\xe9es."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"larchitecture",children:"L'architecture"}),"\n",(0,s.jsx)(n.p,{children:"Nous allons partir sur une architecture tr\xe8s simple et tr\xe8s d\xe9coup\xe9e d'application server. Voici les types de classes que nous allons cr\xe9er\xa0:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Une ",(0,s.jsx)(n.code,{children:"Entity"}),", qui repr\xe9sente un objet en bases de donn\xe9es."]}),"\n",(0,s.jsxs)(n.li,{children:["Un ",(0,s.jsx)(n.code,{children:"Repository"}),", qui permet de manipuler ces entit\xe9s."]}),"\n",(0,s.jsxs)(n.li,{children:["Des ",(0,s.jsx)(n.code,{children:"UseCase"}),", qui permettent de faire des actions sur ces entit\xe9s. Tu as un ",(0,s.jsx)(n.code,{children:"UseCase"})," par action."]}),"\n",(0,s.jsxs)(n.li,{children:["Un ",(0,s.jsx)(n.code,{children:"Controller"}),", qui permet de faire le lien entre l'application et l'ext\xe9rieur."]}),"\n",(0,s.jsxs)(n.li,{children:["Un ",(0,s.jsx)(n.code,{children:"DTO"}),", un ",(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/Objet_de_transfert_de_donn%C3%A9es",children:"Data Transfer Object"}),", qui est l'objet que s'\xe9changeront notre serveur et ses clients."]}),"\n",(0,s.jsxs)(n.li,{children:["Un ",(0,s.jsx)(n.code,{children:"Mapper"}),", qui permet de faire le lien entre les entit\xe9s et les DTO."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Une classe, un r\xf4le. C'est simple, c'est efficace, c'est facile \xe0 comprendre. Et c'est le but et le leitmotiv de tout l'article."}),"\n",(0,s.jsx)(n.h3,{id:"le-processus-dune-action-initialis\xe9e-par-le-client",children:"Le processus d'une action initialis\xe9e par le client"}),"\n",(0,s.jsxs)(n.p,{children:["Dans notre application, nos composants vont int\xe9ragir entre eux. Comme dit pr\xe9c\xe9demment, le mieux, c'est que chacun aie sa propre responsabilit\xe9.",(0,s.jsx)(n.br,{}),"\n","Voici un r\xe9sum\xe9 de qui fait quoi dans notre application\xa0:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"Client"})," envoie une requ\xeate HTTP au ",(0,s.jsx)(n.code,{children:"Serveur"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"Serveur"})," distribue la requ\xeate ",(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/S%C3%A9rialisation",children:"d\xe9s\xe9rialis\xe9e"})," au ",(0,s.jsx)(n.code,{children:"Controller"})," en validant les param\xe8tres. Si besoin, c'est \xe0 ce moment, l\xe0 que le ",(0,s.jsx)(n.code,{children:"DTO"})," apparait sous forme de param\xe8tre de requ\xeate."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"Controller"})," demande au ",(0,s.jsx)(n.code,{children:"UseCase"})," d'effectuer la t\xe2che, en lui passant les param\xe8tres dont il aura besoin."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"UseCase"})," effectue la t\xe2che. C'est l\xe0 que se trouve tout le m\xe9tier. C'est lui qui fait appel aux autres composants.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["S'il a besoin de transformer un ",(0,s.jsx)(n.code,{children:"DTO"})," en ",(0,s.jsx)(n.code,{children:"Entity"})," ou inversement, il appelle un ",(0,s.jsx)(n.code,{children:"Mapper"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["S'il a besoin d'un acc\xe8s \xe0 la base de donn\xe9e, il appelle un ",(0,s.jsx)(n.code,{children:"Repository"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"S'il a besoin d'un autre composant, il l'appelle directement."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"UseCase"})," retourne un ",(0,s.jsx)(n.code,{children:"DTO"})," ou une valeur au ",(0,s.jsx)(n.code,{children:"Controller"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"Controller"})," retourne une r\xe9ponse HTTP au ",(0,s.jsx)(n.code,{children:"Serveur"})," sous forme d'objet Java."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"Serveur"})," ",(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/S%C3%A9rialisation",children:"serialise"})," l'objet java en requ\xeate HTTP qu'il retourne au ",(0,s.jsx)(n.code,{children:"Client"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.mermaid,{value:"---\ntitle: Cheminement simplifi\xe9 d'une requ\xeate HTTP \n---\nsequenceDiagram\n    actor client as Client\n    participant server as Server\n    participant controller as Controller\n    participant useCase as UseCase\n    box Accessible seulement du UseCase\n        participant mapper as Mapper\n        participant repo as Repository\n    end\n\n    client -) server: requ\xeate HTTP\n    activate server\n    server ->> controller: distribue\n    activate controller\n    controller ->> useCase: param\xe8tre / DTO\n    activate useCase\n    useCase ->> mapper: DTO\n    activate mapper\n    mapper ->> useCase: Entity\n    deactivate mapper\n    useCase ->> repo: param\xe8tre\n    activate repo\n    repo ->> useCase: Entity\n    deactivate repo\n    useCase ->> mapper: Entity\n    activate mapper\n    mapper ->> useCase: DTO\n    deactivate mapper\n    useCase ->> controller: DTO\n    deactivate useCase\n    controller ->> server: retourne\n    deactivate controller\n    server -) client: r\xe9ponse HTTP\n    deactivate server"}),"\n",(0,s.jsxs)(n.p,{children:["Pour r\xe9sumer, dans un ",(0,s.jsx)(n.code,{children:"GET"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"Client"})," est le composant qui envoie les requ\xeates HTTP au ",(0,s.jsx)(n.code,{children:"Server"})," et qui re\xe7oit les r\xe9ponses HTTP du ",(0,s.jsx)(n.code,{children:"Server"}),". Cela peut \xeatre une interface graphique, une autre application, un script, etc."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"Server"})," est le composant qui re\xe7oit les requ\xeates HTTP du ",(0,s.jsx)(n.code,{children:"Client"})," et qui retourne les r\xe9ponses HTTP au ",(0,s.jsx)(n.code,{children:"Client"}),". Dans notre cas, c'est un serveur Web Spring Boot."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"Controller"})," est le point d'entr\xe9e de l'application. Il re\xe7oit les requ\xeates HTTP et retourne les r\xe9ponses HTTP. Il ne sait g\xe9rer que \xe7a\xa0!"]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"UseCase"})," est le c\u0153ur de l'application. Il ne sait pas g\xe9rer les requ\xeates HTTP. Il ne sait pas non plus g\xe9rer les acc\xe8s \xe0 la base de donn\xe9e. Il ne sait que g\xe9rer le m\xe9tier et demander aux autres composants de faire ce qu'ils savent faire."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"Mapper"})," est un composant qui transforme un ",(0,s.jsx)(n.code,{children:"DTO"})," en ",(0,s.jsx)(n.code,{children:"Entity"})," ou inversement."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"Repository"})," est un composant qui g\xe8re les acc\xe8s \xe0 la base de donn\xe9e."]}),"\n",(0,s.jsxs)(n.li,{children:["Le ",(0,s.jsx)(n.code,{children:"DTO"})," est un objet qui repr\xe9sente une requ\xeate HTTP ou une r\xe9ponse HTTP. Il est utilis\xe9 pour communiquer entre le ",(0,s.jsx)(n.code,{children:"Controller"})," et le ",(0,s.jsx)(n.code,{children:"UseCase"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["L'",(0,s.jsx)(n.code,{children:"Entity"})," est un objet qui repr\xe9sente une ligne de la base de donn\xe9e. Il est utilis\xe9 pour communiquer entre le ",(0,s.jsx)(n.code,{children:"UseCase"})," et le ",(0,s.jsx)(n.code,{children:"Repository"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Dans notre cas, c'est Spring qui va s'occuper de la [d\xe9s\xe9rialisation et de la s\xe9rialisation](https: //fr.wikipedia.org/wiki/S%C3%A9rialisation) des objets Java en requ\xeate HTTP. Tout seul, gr\xe2ce \xe0 la magie des annotations. Et gr\xe2ce \xe0 une library qui s'appelle ",(0,s.jsx)(n.a,{href:"https://github.com/FasterXML/jackson",children:"Jackson"})]})}),"\n",(0,s.jsx)(n.h3,{id:"les-d\xe9pendances",children:"Les d\xe9pendances"}),"\n",(0,s.jsxs)(n.p,{children:["Nous allons utiliser les d\xe9pendances que nous avons ajout\xe9es dans le projet de l'article ",(0,s.jsx)(n.a,{href:"/blog/begin-spring#avant-de-commencer-pr%C3%A9sentation-des-d%C3%A9pendances",children:"D\xe9buter avec Spring gr\xe2ce \xe0 Spring Initializr"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Rien de plus."}),"\n",(0,s.jsx)(n.h2,{id:"\xe9crivons-notre-projet-spring",children:"\xc9crivons notre projet Spring\xa0!"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"On va Springer\xa9\xa0!"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Commen\xe7ons par le d\xe9but. Ou la fin, tout d\xe9pend du point de vue. Nous, nous allons faire les choses dans l'ordre que je t'ai donn\xe9 ",(0,s.jsx)(n.a,{href:"#larchitecture",children:"plus haut"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"J'aime \xe9crire mon code tout en anglais. Comme tout, c'est une question d'habitude et de choix personnel ou d'\xe9quipe. Par contre, je vais t'\xe9crire toute la doc en fran\xe7ais pour plus de simplicit\xe9."}),(0,s.jsxs)(n.p,{children:["Pour faire simple, je vais tout mettre dans le m\xeame package m\xeame si ce n'est pas recommand\xe9. Je traiterai plus tard les histoires de Clean architecture, d'architecture hexagonale ou autres. Il n'est pas n\xe9cessaire de conna\xeetre ces points pour avancer. D'autres articles\xa0? Des ",(0,s.jsx)(n.a,{href:"/devento",children:"Devento"}),"\xa0? On verra..."]})]}),"\n",(0,s.jsx)(n.admonition,{title:"L'astuce de ton Dev Sensei",type:"info",children:(0,s.jsx)(n.p,{children:"Ne copie colle pas le code. Jamais. Enfin, pas tout de suite. Lis-le, comprends-le, et, pour \xe7a, \xe9cris-le. L'apprentissage passe par l\xe0. Si tu lis cet article, tu as besoin de pratiquer. Alors commence maintenant. Tiens, je devrais \xe9crire un article sur la pratique, le copier-coller, et tout \xe7a..."})}),"\n",(0,s.jsx)(n.h3,{id:"\xe9crivons-lentity",children:"\xc9crivons l'Entity"}),"\n",(0,s.jsxs)(n.p,{children:["C'est l'objet, au sens ",(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/Programmation_orient%C3%A9e_objet",children:"POO"}),", que nous allons manipuler en base de donn\xe9e. C'est un simple objet, avec des attributs, des getters et des setters. C'est tout. C'est une classe Java, rien de plus."]}),"\n",(0,s.jsx)(n.p,{children:"Il ne sera manipuler que par nos Use Cases et par notre repository. Le Controller n'en aura jamais connaissance. Cela permet de d\xe9solidariser ton IHM de ta BDD."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SomethingEntity.java"',children:"package fr.nvh.begin.spring.bag;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Entity // indique que cette classe est une entit\xe9 JPA, c'est obligatoire pour que JPA puisse la g\xe9rer\n@Getter // Lombok : g\xe9n\xe8re automatiquement les getters\n@Setter // Lombok : g\xe9n\xe8re automatiquement les setters\n@ToString // Lombok : g\xe9n\xe8re automatiquement la m\xe9thode toString()\npublic class SomethingEntity {\n\n    @Id // indique \xe0 Hibernate que ce champ est la cl\xe9 primaire qui identifie de mani\xe8re unique chaque ligne en base, l\xe0 encore c'est obligatoire\n    @GeneratedValue(strategy = GenerationType.IDENTITY) // indique que c'est le SGBD qui s'occupe de g\xe9n\xe9rer les identifiants\n    private Long id;\n    private String name; // le nom de la chose\n    private String description; // la description de la chose\n\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Voil\xe0, j'avais dit que j'allais faire simple."}),"\n",(0,s.jsx)(n.p,{children:"Bon, et si nous faisions un peu de base de donn\xe9es\xa0?"}),"\n",(0,s.jsx)(n.h3,{id:"\xe9crivons-le-repository",children:"\xc9crivons le Repository"}),"\n",(0,s.jsx)(n.p,{children:"Le repository est la classe qui va permettre de manipuler les entit\xe9s. C'est une interface qui va \xeatre impl\xe9ment\xe9e par Spring Data JPA. C'est une interface, tout simplement. Spring se chargera de l'impl\xe9menter pour toi. Pas juste de l'instancier, Spring va te l'impl\xe9menter. Magique\xa0!"}),"\n",(0,s.jsx)(n.p,{children:'Et quand je dis "tout simplement"\xa0:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SomethingRepository.java"',children:"package fr.nvh.begin.spring.bag;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository // indique que cette interface est un bean Spring de type Repository\npublic interface SomethingRepository extends JpaRepository<SomethingEntity, Long> {\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Et voil\xe0. C'est une interface qui \xe9tend une autre interface. Tu n'as rien de plus \xe0 faire. Spring va te g\xe9n\xe9rer tout le code pour toi gr\xe2ce \xe0 l'interface ",(0,s.jsx)(n.code,{children:"JpaRepository"}),". Je t'avais dit que Spring \xe9tait magique\xa0!"]}),"\n",(0,s.jsxs)(n.p,{children:["Le ",(0,s.jsx)(n.code,{children:"@Repository"})," est une annotation Spring qui indique que cette interface est un bean Spring de type Repository. Et hop, notre premier grain de caf\xe9 dans le sac."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["Spring est m\xeame encore plus magique. Tu peux cr\xe9er des m\xe9thodes en respectant une ",(0,s.jsx)(n.a,{href:"https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html",children:"certaine nomenclature"}),", et Spring va g\xe9n\xe9rer les requ\xeates SQL pour toi. Ce n'est m\xeame de la magie \xe0 ce niveau-l\xe0, c'est un miracle. Je t'en parlerai un autre jour. Ou dans un ",(0,s.jsx)(n.a,{href:"/devento",children:"Devento"}),"."]}),(0,s.jsxs)(n.p,{children:["Il existe plusieurs types de repository qui contient des m\xe9thodes pr\xe9d\xe9finies. L\xe0, j'ai pris ",(0,s.jsx)(n.code,{children:"JpaRepository"}),", le plus complet et le plus simple \xe0 utiliser."]})]}),"\n",(0,s.jsxs)(n.p,{children:["Allez, nous allons quand m\xeame tester tout \xe7a. Est-ce que tu te souviens de ",(0,s.jsx)(n.a,{href:"https://www.h2database.com/html/main.html",children:"H2 Database"}),"\xa0? C'est le moment de le faire fonctionner."]}),"\n",(0,s.jsx)(n.h3,{id:"testons-notre-entit\xe9-et-son-repository",children:"Testons notre entit\xe9 et son repository"}),"\n",(0,s.jsx)(n.p,{children:"Rien de plus important qu'un feedback r\xe9gulier. Je te conseille d'avancer pas \xe0 pas et de tester \xe0 chaque \xe9tape. Comme les tests unitaires ne sont pas le sujet de cet article, je vais te montrer une astuce\xa0: le context Spring."}),"\n",(0,s.jsxs)(n.p,{children:["Va dans ta classe principale, celle qui a le ",(0,s.jsx)(n.code,{children:"@SpringBootApplication"}),", modifie la comme ceci\xa0:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="DebuteAvecSpringApplication.java"',children:'package fr.nvh.begin.spring;\n\nimport fr.nvh.begin.spring.bag.SomethingEntity;\nimport fr.nvh.begin.spring.bag.SomethingRepository;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.ConfigurableApplicationContext;\n\n\n@SpringBootApplication\npublic class DebuteAvecSpringApplication {\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context = SpringApplication.run(DebuteAvecSpringApplication.class, args);\n        SomethingRepository repository = context.getBean(SomethingRepository.class);\n\n        // Cr\xe9ation d\'une instance de SomethingEntity\n        SomethingEntity myFirstThing = new SomethingEntity();\n        myFirstThing.setName("My first thing");\n        myFirstThing.setDescription("This is my first thing");\n        // Affichage dans la console pour voir ce qu\'elle contient\n        System.out.println("not saved thing = " + myFirstThing);\n\n        // Sauvegarde en base de donn\xe9es\n        SomethingEntity save = repository.save(myFirstThing);\n        // Affichage \xe0 nouveau dans la console pour voir ce qu\'elle contient\n        System.out.println("saved thing = " + myFirstThing);\n\n        // R\xe9cup\xe9ration de la chose de la base de donn\xe9es pour v\xe9rifier qu\'elle a bien \xe9t\xe9 sauvegard\xe9e\n        repository.findById(save.getId()).ifPresent(thing -> System.out.println("read thing = " + thing));\n\n        // Affichage de toutes les choses en base de donn\xe9es\n        System.out.println("All things : ");\n        repository.findAll().forEach(thing -> System.out.println(" - " + thing));\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Dans la console, apr\xe8s les logs Spring, tu vas voir appara\xeetre nos ",(0,s.jsx)(n.code,{children:"System.out.println"}),"\xa0:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"not saved thing = SomethingEntity(id=null, name=My first thing, description=This is my first thing)\nsaved thing = SomethingEntity(id=1, name=My first thing, description=This is my first thing)\nread thing = SomethingEntity(id=1, name=My first thing, description=This is my first thing)\nAll things : \n - SomethingEntity(id=1, name=My first thing, description=This is my first thing)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Tu as cr\xe9\xe9 une entit\xe9, tu l'as sauvegard\xe9e, tu l'as lue, et tu as affich\xe9 toutes les entit\xe9s. C'est tout. C'est magique. C'est Spring."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Avant la sauvegarde, l'entit\xe9 n'avait pas d'identifiant. Apr\xe8s la sauvegarde, elle en a un. C'est Spring et Hibernate qui s'en sont occup\xe9. Magique, encore et toujours\xa0!"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["N'utilise jamais ",(0,s.jsx)(n.code,{children:"System.out.println"})," en projet. C'est juste pour te montrer que \xe7a marche et nous simplifier les logs\xa0! En projet, m\xeame perso, tu utiliseras un vrai logger. J'y reviendrai dans un autre article. Encore."]})}),"\n",(0,s.jsxs)(n.p,{children:["Tu veux v\xe9rifier ta base de donn\xe9es\xa0? Lance ton serveur et va sur ",(0,s.jsx)(n.a,{href:"http://localhost:8080/h2-console",children:"http://localhost:8080/h2-console"}),". Connecte-toi en utilisant les param\xe8tres indiqu\xe9s dans tes logs. Tu trouveras toutes les infos dans mon article pr\xe9c\xe9dent, dans la partie ",(0,s.jsx)(n.a,{href:"http://localhost:3000/blog/begin-spring#lancement-de-lapplication-du-projet-g%C3%A9n%C3%A9r%C3%A9",children:"Lancement de l'application du projet g\xe9n\xe9r\xe9"}),", sous partie des logs.\n",(0,s.jsx)(n.em,{children:"Abracadabra\xa0!"})," Tu devrais voir ta table ",(0,s.jsx)(n.code,{children:"SOMETHING_ENTITY"})," et les donn\xe9es que tu as ins\xe9r\xe9es."]}),"\n",(0,s.jsx)(n.admonition,{title:"L'astuce de ton Dev Sensei",type:"info",children:(0,s.jsxs)(n.p,{children:["La JDBC URL change \xe0 chaque d\xe9marrage de l'application. Tu peux la trouver dans les logs de ton application. Tu peux aussi la changer dans le fichier ",(0,s.jsx)(n.code,{children:"application.properties"})," de ton projet. Ajoute la ligne ",(0,s.jsx)(n.code,{children:"spring.datasource.url=jdbc:h2:mem:mydb"})," pour avoir toujours la m\xeame URL."]})}),"\n",(0,s.jsx)(n.h3,{id:"\xe9crivons-le-dto",children:"\xc9crivons le DTO"}),"\n",(0,s.jsx)(n.p,{children:"Le DTO est la classe qui va permettre de faire le lien entre l'entit\xe9 et le controller. C'est un simple objet, avec des attributs, des getters et des setters. C'est tout. Il s'agit d'une classe Java, rien de plus. Comme l'entit\xe9, mais sans les annotations JPA."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SomethingDto.java"',children:"package fr.nvh.begin.spring.bag;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Getter // Lombok : g\xe9n\xe8re automatiquement les getters\n@Setter // Lombok : g\xe9n\xe8re automatiquement les setters\n@ToString // Lombok : g\xe9n\xe8re automatiquement la m\xe9thode toString\npublic class SomethingDto {\n\n    private Long id;\n    private String name;\n    private String description;\n\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\xe9crivons-le-mapper",children:"\xc9crivons le Mapper"}),"\n",(0,s.jsx)(n.p,{children:"Le mapper est la classe qui va permettre de faire le lien entre l'entit\xe9 et le DTO. C'est une classe, avec des m\xe9thodes, qui vont permettre de convertir une entit\xe9 en DTO et un DTO en entit\xe9. Du coup, nous allons cr\xe9er deux m\xe9thodes, une pour chaque sens."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SomethingMapper.java"',children:"package fr.nvh.begin.spring.bag;\n\nimport org.springframework.stereotype.Component;\n\n@Component // indique que cette classe est un bean Spring de type Component\npublic class SomethingMapper {\n\n    public SomethingDto toDto(SomethingEntity entity) {\n        if (entity == null) {\n            return null;\n        }\n        SomethingDto dto = new SomethingDto();\n        dto.setId(entity.getId());\n        dto.setName(entity.getName());\n        dto.setDescription(entity.getDescription());\n        return dto;\n    }\n\n    public SomethingEntity toEntity(SomethingDto dto) {\n        if (dto == null) {\n            return null;\n        }\n        SomethingEntity entity = new SomethingEntity();\n        entity.setId(dto.getId());\n        entity.setName(dto.getName());\n        entity.setDescription(dto.getDescription());\n        return entity;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Cette classe est un ",(0,s.jsx)(n.code,{children:"@Component"}),", c'est-\xe0-dire un bean Spring. Un autre grain de caf\xe9 dans le sac de Spring."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Tu as des librairies qui te permettent de fare des mappers \xe0 grands coups... d'annotations\xa0! Par exemple, ",(0,s.jsx)(n.a,{href:"https://mapstruct.org/",children:"MapStruct"}),". Mais je te conseille de commencer par faire tes mappers \xe0 la main. C'est plus simple, et \xe7a te permet de comprendre ce que tu fais. Tu pourras toujours utiliser MapStruct plus tard."]})}),"\n",(0,s.jsxs)(n.p,{children:["Allez, testons ce mapper\xa0! Reprends la classe ",(0,s.jsx)(n.code,{children:"DebuteAvecSpringApplication"})," et modifie-la comme ceci\xa0:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="DebuteAvecSpringApplication.java"',children:'package fr.nvh.begin.spring;\n\nimport fr.nvh.begin.spring.bag.SomethingDto;\nimport fr.nvh.begin.spring.bag.SomethingEntity;\nimport fr.nvh.begin.spring.bag.SomethingMapper;\nimport fr.nvh.begin.spring.bag.SomethingRepository;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.ConfigurableApplicationContext;\n\n\n@SpringBootApplication\npublic class DebuteAvecSpringApplication {\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext context = SpringApplication.run(DebuteAvecSpringApplication.class, args);\n        testRepository(context);\n        testMapper(context);\n    }\n\n    private static void testMapper(ConfigurableApplicationContext context) {\n        System.out.println("*** Test du mapper ***");\n        SomethingEntity entity = new SomethingEntity();\n        entity.setId(1L); // on met un id pour voir si le mapper le prend en compte\n        entity.setName("Another thing");\n        entity.setDescription("This is another thing");\n\n        System.out.println("not mapped entity = " + entity);\n\n        SomethingMapper mapper = context.getBean(SomethingMapper.class);\n        SomethingDto dto = mapper.toDto(entity);\n        System.out.println("mapped DTO = " + dto);\n\n        SomethingEntity mappedEntity = mapper.toEntity(dto);\n        System.out.println("mappedEntity = " + mappedEntity);\n\n        // on teste aussi les cas limites\n        System.out.println("toDto(null) = " + mapper.toDto(null));\n        System.out.println("toEntity(null) = " + mapper.toEntity(null));\n    }\n\n    private static void testRepository(ConfigurableApplicationContext context) {\n        System.out.println("*** Test du repository ***");\n        SomethingRepository repository = context.getBean(SomethingRepository.class);\n\n        // Cr\xe9ation d\'une instance de SomethingEntity\n        SomethingEntity myFirstThing = new SomethingEntity();\n        myFirstThing.setName("My first thing");\n        myFirstThing.setDescription("This is my first thing");\n        // on l\'affiche dans la console pour voir ce qu\'elle contient\n        System.out.println("not saved thing = " + myFirstThing);\n\n        // on la sauvegarde en base de donn\xe9es\n        SomethingEntity save = repository.save(myFirstThing);\n        // on l\'affiche \xe0 nouveau dans la console pour voir ce qu\'elle contient\n        System.out.println("saved thing = " + myFirstThing);\n\n        // on la r\xe9cup\xe8re de la base de donn\xe9es pour v\xe9rifier qu\'elle a bien \xe9t\xe9 sauvegard\xe9e\n        repository.findById(save.getId()).ifPresent(thing -> System.out.println("read thing = " + thing));\n\n        // on affiche toutes les choses en base de donn\xe9es\n        System.out.println("All things : ");\n        repository.findAll().forEach(thing -> System.out.println(" - " + thing));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Oui, j'ai r\xe9\xe9crit le code. Ce sera plus simple \xe0 lire. Il est recommand\xe9 de faire des petites m\xe9thodes qui font une seule chose. Je pourrais faire un article l\xe0-dessus..."}),"\n",(0,s.jsx)(n.p,{children:"Alors, maintenant, lance ton application. Tu devrais voir appara\xeetre dans la console\xa0:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"*** Test du repository ***\nnot saved thing = SomethingEntity(id=null, name=My first thing, description=This is my first thing)\nsaved thing = SomethingEntity(id=1, name=My first thing, description=This is my first thing)\nread thing = SomethingEntity(id=1, name=My first thing, description=This is my first thing)\nAll things : \n - SomethingEntity(id=1, name=My first thing, description=This is my first thing)\n*** Test du mapper ***\nnot mapped entity = SomethingEntity(id=1, name=Another thing, description=This is another thing)\nmapped DTO = SomethingDto(id=1, name=Another thing, description=This is another thing)\nmappedEntity = SomethingEntity(id=1, name=Another thing, description=This is another thing)\ntoDto(null) = null\ntoEntity(null) = null\n"})}),"\n",(0,s.jsxs)(n.p,{children:["La premi\xe8re partie ",(0,s.jsx)(n.code,{children:"*** Test du repository ***"})," est d\xe9j\xe0 connue, je l'ai juste mise en forme afin qu'on la voie bien dans les logs. La deuxi\xe8me partie ",(0,s.jsx)(n.code,{children:"*** Test du mapper ***"})," est nouvelle. Tu as cr\xe9\xe9 une entit\xe9, tu l'as transform\xe9e en DTO, tu as transform\xe9 ce DTO en entit\xe9, et tu as test\xe9 les cas limites. Quand tu testes, tu testes tout\xa0: les cas normaux, les cas limites, les cas d'erreurs. Tu sais quoi\xa0? Je t'en parlerai dans un autre article. Ou dans un ",(0,s.jsx)(n.a,{href:"/devento",children:"Devento"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"\xe9crivons-le-controller",children:"\xc9crivons le Controller"}),"\n",(0,s.jsx)(n.p,{children:"Comme je te l'ai dit, le controller va nous permettre de faire le lien entre l'application et l'ext\xe9rieur. Tu d\xe9clares des m\xe9thodes avec des tas d'annotations, et Spring va s'occuper de tout. C'est magique."}),"\n",(0,s.jsx)(n.admonition,{title:"L'astuce de ton Dev Sensei",type:"info",children:(0,s.jsx)(n.p,{children:"Je te conseille de faire un endpoint apr\xe8s l'autre. C'est plus simple pour tester et pour comprendre. Et du coup, un use case apr\xe8s l'autre. Et n'oublie d'\xe9crire le code que je te pr\xe9sente, ne le copie-colle pas si tu veux commencer \xe0 le retenir."})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SomethingController.java"',children:'package fr.nvh.begin.spring.bag;\n\nimport fr.nvh.begin.spring.bag.use.cases.SomethingCreateUseCase;\nimport fr.nvh.begin.spring.bag.use.cases.SomethingDeleteUseCase;\nimport fr.nvh.begin.spring.bag.use.cases.SomethingFindAllUseCase;\nimport fr.nvh.begin.spring.bag.use.cases.SomethingFindByIdUseCase;\nimport fr.nvh.begin.spring.bag.use.cases.SomethingUpdateUseCase;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n@Slf4j // Lombok : g\xe9n\xe8re automatiquement un logger\n@RequiredArgsConstructor\n// Lombok : g\xe9n\xe8re automatiquement un constructeur avec tous les champs en param\xe8tres. Cela permet d\'injecter les d\xe9pendances dans le contr\xf4leur.\n@RestController // indique que cette classe est un bean Spring de type Controller\n@RequestMapping("/api/something")\n// indique que toutes les m\xe9thodes de cette classe sont accessibles via l\'URL /api/something\npublic class SomethingController {\n    // tous les use cases dont nous avons besoin, un par action\n    private final SomethingCreateUseCase somethingCreateUseCase;\n    private final SomethingFindAllUseCase somethingFindAllUseCase;\n    private final SomethingFindByIdUseCase somethingFindByIdUseCase;\n    private final SomethingUpdateUseCase somethingUpdateUseCase;\n    private final SomethingDeleteUseCase somethingDeleteUseCase;\n  \n    @ResponseStatus(HttpStatus.CREATED)\n    @PostMapping\n    public SomethingDto create(@RequestBody SomethingDto somethingDto) { // le param\xe8tre somethingDto est r\xe9cup\xe9r\xe9 dans le corps de la requ\xeate\n        log.info("POST /api/something {}", somethingDto); // log pour voir ce qui se passe dans la console\n        return somethingCreateUseCase.create(somethingDto);\n    }\n  \n    @ResponseStatus(HttpStatus.OK) // indique que la m\xe9thode retourne un code HTTP 200\n    @GetMapping // indique que cette m\xe9thode est accessible via une requ\xeate HTTP GET\n    public List<SomethingDto> findAll() {\n        log.info("GET /api/something"); // log pour voir ce qui se passe dans la console\n        return somethingFindAllUseCase.findAll(); // appel du use case\n    }\n  \n    @ResponseStatus(HttpStatus.OK)\n    @GetMapping("/{id}")\n    public SomethingDto findById(@PathVariable Long id) { // le param\xe8tre id est r\xe9cup\xe9r\xe9 dans l\'URL\n        log.info("GET /api/something/{}", id); // log pour voir ce qui se passe dans la console\n        return somethingFindByIdUseCase.findById(id);\n    }\n  \n    @ResponseStatus(HttpStatus.OK)\n    @PutMapping("/{id}")\n    public SomethingDto update(@PathVariable Long id, @RequestBody SomethingDto somethingDto) {\n        log.info("PUT /api/something/{} {}", id, somethingDto); // log pour voir ce qui se passe dans la console\n        return somethingUpdateUseCase.update(id, somethingDto);\n    }\n  \n    @ResponseStatus(HttpStatus.NO_CONTENT)\n    @DeleteMapping("/{id}")\n    public void delete(@PathVariable Long id) {\n        log.info("DELETE /api/something/{}", id); // log pour voir ce qui se passe dans la console\n        somethingDeleteUseCase.delete(id);\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Voil\xe0 un controller tr\xe8s classique. Quand tu mets @RestController, Spring va s'occuper de tout. Tu n'as pas besoin de faire de ",(0,s.jsx)(n.code,{children:"@ResponseBody"})," ou de ",(0,s.jsx)(n.code,{children:"@RequestBody"}),". C'est magique. Et par d\xe9faut il te renvoie une r\xe9ponse ",(0,s.jsx)(n.code,{children:"HTTP 200"}),". Comme j'ai voulu des r\xe9ponses diff\xe9rentes, j'ai mis des ",(0,s.jsx)(n.code,{children:"@ResponseStatus"})," partout, y compris pour les ",(0,s.jsx)(n.code,{children:"HTTP 200"}),". C'est une question de coh\xe9rence."]}),"\n",(0,s.jsx)(n.p,{children:"Spring s'occupe aussi de la d\xe9s\xe9rialisation et de la s\xe9rialisation des diff\xe9rents param\xe8tres. Tu as plusieurs annotations pour indiquer \xe0 Spring o\xf9 il doit lire la donn\xe9e\xa0:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@PathVariable"})," pour les param\xe8tres dans l'URL."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@RequestParam"})," pour les param\xe8tres dans la requ\xeate"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@RequestBody"})," pour les param\xe8tres dans le corps de la requ\xeate, par d\xe9faut en JSON."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Il y en a d'autres, mais celles-ci sont les plus courantes."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Dans un autre article, je te montrerai comment passer des param\xe8tres pour, par exemple, trier ou paginer les r\xe9sultats, pour faire des recherches ou des filtres."})}),"\n",(0,s.jsx)(n.admonition,{title:"L'astuce de ton Dev Sensei",type:"note",children:(0,s.jsxs)(n.p,{children:["Fais bien attention, j'utilise un ",(0,s.jsx)(n.code,{children:"@RequiredArgsConstructor"})," de Lombok. Cela me permet de ne pas \xe9crire de constructeur. Mais ce constructeur ne prend en compte que les champs ",(0,s.jsx)(n.code,{children:"final"}),". C'est une bonne pratique de mettre tous les champs en ",(0,s.jsx)(n.code,{children:"final"})," pour \xe9viter les erreurs. Par contre, si tu ne mets pas tes champs en ",(0,s.jsx)(n.code,{children:"final"}),", ils ne seront pas initialis\xe9s dans le constructeur."]})}),"\n",(0,s.jsx)(n.h3,{id:"\xe9crivons-les-use-cases",children:"\xc9crivons les Use Cases"}),"\n",(0,s.jsxs)(n.p,{children:["Passons \xe0 la partie m\xe9tier. J'ai dit un ",(0,s.jsx)(n.code,{children:"UseCase"})," par action. Ils vont \xeatre tr\xe8s simples\xa0: ils vont appeler le ",(0,s.jsx)(n.code,{children:"Repository"})," et le ",(0,s.jsx)(n.code,{children:"Mapper"})," si besoin. C'est tout."]}),"\n",(0,s.jsx)(n.h4,{id:"1-le-use-case-pour-cr\xe9er-une-chose",children:"1. Le Use Case pour cr\xe9er une chose"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SomethingCreateUseCase.java"',children:"package fr.nvh.begin.spring.bag.use.cases;\n\nimport fr.nvh.begin.spring.bag.SomethingDto;\nimport fr.nvh.begin.spring.bag.SomethingEntity;\nimport fr.nvh.begin.spring.bag.SomethingMapper;\nimport fr.nvh.begin.spring.bag.SomethingRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Component;\n\n@RequiredArgsConstructor\n@Component\npublic class SomethingCreateUseCase {\n    private final SomethingRepository repository;\n    private final SomethingMapper mapper;\n\n    public SomethingDto create(SomethingDto somethingDto) {\n        SomethingEntity entity = mapper.toEntity(somethingDto);\n        SomethingEntity saved = repository.save(entity);\n        return mapper.toDto(saved);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"2-le-use-case-pour-lire-toutes-les-choses",children:"2. Le Use Case pour lire toutes les choses"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SomethingFindAllUseCase.java"',children:"package fr.nvh.begin.spring.bag.use.cases;\n\nimport fr.nvh.begin.spring.bag.SomethingDto;\nimport fr.nvh.begin.spring.bag.SomethingMapper;\nimport fr.nvh.begin.spring.bag.SomethingRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\n@RequiredArgsConstructor\n@Component\npublic class SomethingFindAllUseCase {\n\n    private final SomethingRepository repository;\n    private final SomethingMapper mapper;\n\n    public List<SomethingDto> findAll() {\n        return repository.findAll().stream().map(mapper::toDto).toList();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"3-le-use-case-pour-lire-une-chose",children:"3. Le Use Case pour lire une chose"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SomethingFindByIdUseCase.java"',children:"package fr.nvh.begin.spring.bag.use.cases;\n\nimport fr.nvh.begin.spring.bag.SomethingDto;\nimport fr.nvh.begin.spring.bag.SomethingMapper;\nimport fr.nvh.begin.spring.bag.SomethingRepository;\nimport jakarta.persistence.EntityNotFoundException;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Component;\n\n@RequiredArgsConstructor\n@Component\npublic class SomethingFindByIdUseCase {\n    private final SomethingRepository repository;\n    private final SomethingMapper mapper;\n\n    public SomethingDto findById(Long id) {\n        return repository.findById(id)\n                .map(mapper::toDto)\n                .orElseThrow(EntityNotFoundException::new);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"4-le-use-case-pour-modifier-une-chose",children:"4. Le Use Case pour modifier une chose"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SomethingUpdateUseCase.java"',children:"package fr.nvh.begin.spring.bag.use.cases;\n\nimport fr.nvh.begin.spring.bag.SomethingDto;\nimport fr.nvh.begin.spring.bag.SomethingEntity;\nimport fr.nvh.begin.spring.bag.SomethingMapper;\nimport fr.nvh.begin.spring.bag.SomethingRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Component;\n\n@RequiredArgsConstructor\n@Component\npublic class SomethingUpdateUseCase {\n    private final SomethingRepository repository;\n    private final SomethingMapper mapper;\n\n    public SomethingDto update(Long id, SomethingDto somethingDto) {\n        somethingDto.setId(id);\n        SomethingEntity entity = mapper.toEntity(somethingDto);\n        SomethingEntity saved = repository.save(entity);\n        return mapper.toDto(saved);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"5-le-use-case-pour-supprimer-une-chose",children:"5. Le Use Case pour supprimer une chose"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="SomethingDeleteUseCase.java"',children:"package fr.nvh.begin.spring.bag.use.cases;\n\nimport fr.nvh.begin.spring.bag.SomethingRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Component;\n\n@RequiredArgsConstructor\n@Component\npublic class SomethingDeleteUseCase {\n    private final SomethingRepository repository;\n\n    public void delete(Long id) {\n        repository.deleteById(id);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testons-notre-application",children:"Testons notre application"}),"\n",(0,s.jsxs)(n.p,{children:["Tu peux utiliser ",(0,s.jsx)(n.a,{href:"https://www.postman.com/",children:"Postman"})," ou ",(0,s.jsx)(n.a,{href:"https://insomnia.rest/",children:"Insomnia"})," pour tester tes endpoints. Tu peux aussi utiliser ",(0,s.jsx)(n.a,{href:"https://curl.se/",children:"curl"})," ou ",(0,s.jsx)(n.a,{href:"https://httpie.io/",children:"httpie"}),". Ou alors, tu peux utiliser un navigateur. C'est plus simple pour les ",(0,s.jsx)(n.code,{children:"GET"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Je te laisse tester tout \xe7a tout seul, car le billet est d\xe9j\xe0 assez long comme \xe7a. J'\xe9crirai bient\xf4t un article afin de filtrer, de trier, de paginer et dans lequel je te montrerai aussi comment utiliser un logiciel d\xe9di\xe9 comme ceux mentionn\xe9s ci-dessus."}),"\n",(0,s.jsx)(n.h2,{id:"pour-aller-plus-loin",children:"Pour aller plus loin"}),"\n",(0,s.jsx)(n.p,{children:"Voici quelques liens pour approfondir les sujets abord\xe9s dans cet article en attendant le prochain article\xa0!"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Wikipedia\xa0:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/Programmation_orient%C3%A9e_objet",children:"Programmation Orient\xe9e Objet"}),","]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/Hypertext_Transfer_Protocol#M%C3%A9thodes",children:"Les verbes, ou m\xe9thodes, HTTP"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/Representational_state_transfer",children:"REST"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/Objet_de_transfert_de_donn%C3%A9es",children:"Data Transfer Object"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Endpoint_interface",children:"Endpoint"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://fr.wikipedia.org/wiki/S%C3%A9rialisation",children:"La s\xe9rialisation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Jackson_(API)",children:"Jackson"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Les sites officiels\xa0:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.h2database.com/html/main.html",children:"H2 Database"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://projectlombok.org/",children:"Lombok"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://mapstruct.org/",children:"MapStruct"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://hibernate.org/",children:"Hibernate"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Baeldung\xa0:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.baeldung.com/rest-with-spring-series",children:"REST with Spring Tutorial"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.baeldung.com/spring-controller-vs-restcontroller",children:"The Spring @Controller and @RestController Annotations"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.baeldung.com/spring-pathvariable",children:"Spring @PathVariable Annotation"}),"\n",(0,s.jsx)(n.a,{href:"https://www.baeldung.com/spring-request-param",children:"Spring @RequestParam Annotation"}),"\n",(0,s.jsx)(n.a,{href:"https://www.baeldung.com/spring-requestmapping",children:"Spring @RequestMapping"})]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.baeldung.com/learn-jpa-hibernate",children:"Learn JPA & Hibernate"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.baeldung.com/jackson",children:"Jackson"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.baeldung.com/intro-to-project-lombok",children:"Project Lombok"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Je t'ai expliqu\xe9 une architecture simple et efficace pour faire ton application Spring."}),"\n",(0,s.jsx)(n.p,{children:"Je t'ai montr\xe9 du code avec beaucoup d'annotations afin de te montrer que Spring s'occupe de tout pour que tu puisses te concentrer sur ton code."}),"\n",(0,s.jsx)(n.p,{children:"J'esp\xe8re que tu as appris des choses. Et j'esp\xe8re que tu as envie d'en apprendre encore plus. Parce que c'est pas fini. Et je te donne rendez-vous dans le prochain article pour voir comment on peut filtrer et paginer tout \xe7a. Ou l'un des nombreux sujets \xe0 peine abord\xe9s dans cet article. Dis-moi ce que tu pr\xe9f\xe8res en commentaire\xa0!"}),"\n",(0,s.jsx)(n.p,{children:"Si tu as envie que j'explique plus en avant certains concepts ou que je parle de quelque chose en particulier, n'h\xe9site pas \xe0 me le dire dans les commentaires."}),"\n",(0,s.jsxs)(n.p,{children:["Pour ne pas rater les prochains articles, abonne-toi \xe0 un flux (tu as le choix entre ",(0,s.jsx)(n.a,{href:"https://dev-sensei.digicrafters.fr/blog/rss.xml",children:"RSS"}),", ",(0,s.jsx)(n.a,{href:"https://dev-sensei.digicrafters.fr/blog/atom.xml",children:"Atom"})," et ",(0,s.jsx)(n.a,{href:"https://dev-sensei.digicrafters.fr/blog/feeed.json",children:"Json"}),") ou \xe0 la newsletter en ",(0,s.jsx)(n.a,{href:"/",children:"page d'accueil"}),"\xa0!"]}),"\n",(0,s.jsx)(n.p,{children:"Et bon entrainement\xa0!"})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},7192:e=>{e.exports=JSON.parse('{"permalink":"/blog/continue-spring","source":"@site/blog/2024/2024-03-01.continue_spring.md","title":"D\xe9velopper son premier projet Spring : poser de bonnes bases","description":"Que l\'on soit un d\xe9veloppeur Java d\xe9butant ou non, il est n\xe9cessaire de consulter un tutoriel complet avant de lancer son premier projet Spring. En effet, ce framework peut \xeatre difficile \xe0 prendre en main. Une bonne technique d\'approche est n\xe9cessaire pour ne pas se perdre dans son apprentissage. La plupart des tutoriels que j\'ai vus jusqu\'ici m\'ont sembl\xe9 trop compliqu\xe9s pour \xeatre utilis\xe9s sur un premier projet. Cet article propose de cr\xe9er un projet Spring simple qui permet d\'assimiler les bases sans s\'encombrer de la complexit\xe9 du framework.","date":"2024-03-01T00:00:00.000Z","tags":[{"inline":true,"label":"Java","permalink":"/blog/tags/java"},{"inline":true,"label":"Spring","permalink":"/blog/tags/spring"},{"inline":true,"label":"langage","permalink":"/blog/tags/langage"},{"inline":true,"label":"d\xe9veloppement","permalink":"/blog/tags/developpement"},{"inline":true,"label":"tuto","permalink":"/blog/tags/tuto"}],"hasTruncateMarker":true,"authors":[{"name":"Nathaniel Vaur Henel","title":"Tech Lead, D\xe9veloppeur s\xe9nior, formateur et cr\xe9ateur de contenu","description":"Fort de deux d\xe9cennies de d\xe9veloppement, j\'ai acquis une expertise technique en d\xe9veloppement back-end Java associ\xe9 au framework Spring. Avec le temps, j\'ai d\xe9velopp\xe9 une approche \\"artisanale\\" du code, avec la volont\xe9 de maitriser toute la chaine de comp\xe9tences, du recueil du besoin \xe0 la maintenance, avec un souci d\'efficacit\xe9 et de qualit\xe9.","page":{"permalink":"/blog/authors/nathaniel-vaur-henel"},"socials":{"Dev Sensei":"https://dev-sensei.digicrafters.fr/crafters/nathaniel-vaur-henel","linkedin":"https://www.linkedin.com/in/nathaniel-vaur-henel/","github":"https://github.com/nathaniel-vaur-henel","malt":"https://www.malt.fr/profile/nathanielvaurhenel"},"imageURL":"https://github.com/Nathaniel-Vaur-Henel.png","key":"nvh"}],"frontMatter":{"slug":"/continue-spring","title":"D\xe9velopper son premier projet Spring : poser de bonnes bases","authors":"nvh","tags":["Java","Spring","langage","d\xe9veloppement","tuto"],"enableComments":true},"unlisted":false,"prevItem":{"title":"Mermaid, l\'outil de cr\xe9ation de diagrammes vite faits, bien faits","permalink":"/blog/mermaid"},"nextItem":{"title":"D\xe9buter avec Spring gr\xe2ce \xe0 Spring Initializr","permalink":"/blog/begin-spring"}}')}}]);